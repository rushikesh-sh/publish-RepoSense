[{"path":"package.json","fileType":"json","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"name\": \"coachwalla\",","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"  \"version\": \"3.0.1\",","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"  \"description\": \"A HRMS app using Express.js, TypeScript, TypeORM, and MongoDB\",","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"  \"main\": \"lambda.ts\",","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"  \"scripts\": {","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"start\": \"nodemon lambda.ts\",","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \"build\": \"npm i \u0026\u0026 tsc\"","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"  },","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"  \"dependencies\": {","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"@aws-sdk/client-s3\": \"^3.556.0\",","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"@aws-sdk/client-sesv2\": \"^3.569.0\",","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \"@codewalla_india/coachwalla-auth-middleware\": \"^1.0.0\",","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Aditya Gaur"},"content":"    \"@codewalla_india/coachwalla-business-model\": \"^1.0.3\",","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \"@codewalla_india/coachwalla-mongodb-utils\": \"^1.1.7\",","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \"aws-sdk\": \"^2.1521.0\",","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \"axios\": \"^1.6.2\",","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \"bcryptjs\": \"^2.4.3\",","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"    \"body-parser\": \"^1.19.0\",","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \"cookie-parser\": \"^1.4.6\",","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"    \"cors\": \"^2.8.5\",","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"    \"crypto-js\": \"^4.2.0\",","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"    \"csv-parser\": \"^3.0.0\",","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"    \"date-fns\": \"^3.6.0\",","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"    \"dotenv\": \"^16.3.1\",","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"    \"express\": \"^4.17.1\",","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"    \"express-http-context\": \"^1.2.4\",","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"    \"jsonwebtoken\": \"^8.5.1\",","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"    \"mongodb\": \"^6.3.0\",","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"    \"multer\": \"^1.4.5-lts.1\",","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"    \"openai\": \"^4.26.1\",","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"    \"reflect-metadata\": \"^0.1.13\",","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"    \"serverless-http\": \"^3.2.0\",","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"    \"socket.io\": \"^4.7.5\",","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"    \"string-similarity\": \"^4.0.4\",","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"    \"swagger-jsdoc\": \"^6.2.8\",","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"    \"swagger-ui-express\": \"^5.0.0\"","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"  },","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"  \"devDependencies\": {","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"    \"@types/bcryptjs\": \"^2.4.2\",","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"    \"@types/body-parser\": \"^1.19.0\",","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"    \"@types/cookie-parser\": \"^1.4.6\",","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"-"},"content":"    \"@types/cors\": \"^2.8.9\",","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"-"},"content":"    \"@types/crypto-js\": \"^4.2.1\",","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"-"},"content":"    \"@types/dotenv\": \"^8.2.0\",","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"    \"@types/express\": \"^4.17.11\",","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"    \"@types/jsonwebtoken\": \"^8.5.0\",","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"-"},"content":"    \"@types/multer\": \"^1.4.11\",","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"-"},"content":"    \"@types/node\": \"^14.14.31\",","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"-"},"content":"    \"@types/socket.io\": \"^3.0.2\",","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"-"},"content":"    \"@types/string-similarity\": \"^4.0.2\",","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"-"},"content":"    \"@types/swagger-jsdoc\": \"^6.0.4\",","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"-"},"content":"    \"@types/swagger-ui-express\": \"^4.1.6\",","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"-"},"content":"    \"@typescript-eslint/eslint-plugin\": \"^6.12.0\",","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"-"},"content":"    \"@typescript-eslint/parser\": \"^6.12.0\",","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"-"},"content":"    \"eslint\": \"^8.54.0\",","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"-"},"content":"    \"eslint-config-standard-with-typescript\": \"^40.0.0\",","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"-"},"content":"    \"eslint-plugin-import\": \"^2.29.0\",","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"-"},"content":"    \"eslint-plugin-n\": \"^16.3.1\",","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"-"},"content":"    \"eslint-plugin-promise\": \"^6.1.1\",","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"-"},"content":"    \"nodemon\": \"^2.0.22\",","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"-"},"content":"    \"ts-node\": \"^10.9.2\",","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"-"},"content":"    \"typescript\": \"^5.3.3\"","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"-"},"content":"}","isFullCredit":false}],"authorContributionMap":{"Aditya Gaur":1,"-":64}},{"path":"src/controllers/GoalController.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { type Request, type Response, type NextFunction } from \u0027express\u0027","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { GoalService } from \u0027../service/GoalService\u0027","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { ChatService } from \u0027../service/ChatService\u0027","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"export class GoalController {","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"  // Method to change goal status to in review","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"  public changeGoalStatus \u003d (req: Request, res: Response, next: NextFunction): void \u003d\u003e {","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"    const goalService \u003d new GoalService()","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"    goalService.changeGoalStatus(req.body.goalId, req.body.comment)","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"      .then(data \u003d\u003e res.status(data.status).send(data)).catch(next)","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"  public cloneGoal \u003d (req: Request, res: Response, next: NextFunction): void \u003d\u003e {","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"    const goalService \u003d new GoalService()","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Aditya Gaur"},"content":"    goalService.cloneGoal(req.body.goalId)","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"      .then(data \u003d\u003e res.status(data.status).send(data)).catch(next)","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"  // Method to accept or reject a goal","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"  public acceptOrRejectGoal \u003d (req: Request, res: Response, next: NextFunction): void \u003d\u003e {","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"    const goalService \u003d new GoalService()","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"    goalService.acceptOrRejectGoal(req.body.goalId, req.body.accept)","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"      .then(data \u003d\u003e res.status(data.status).send(data)).catch(next)","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"  // Method to get details of a goal","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"  public getGoalDetails \u003d (req: Request, res: Response, next: NextFunction): void \u003d\u003e {","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"    const goalService \u003d new GoalService()","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"    goalService.getGoalById(req.body.goalId)","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"      .then(data \u003d\u003e res.status(data.status).send(data)).catch(next)","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"  // Method to get a list of goals","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"  public getGoalList \u003d (req: Request, res: Response, next: NextFunction): void \u003d\u003e {","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"    const goalService \u003d new GoalService()","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"    goalService.getGoalsList(req.body.userId, req.body.categoryId, req.body.cycle, req.body.goalName)","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"      .then(data \u003d\u003e res.status(data.status).send(data)).catch(next)","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"  // Method to set employee feedback","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"  public setEmployeeFeedback \u003d (req: Request, res: Response, next: NextFunction): void \u003d\u003e {","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"    const goalService \u003d new GoalService()","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"-"},"content":"    goalService.updateEmployeeFeedback(req.body)","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"-"},"content":"      .then(data \u003d\u003e res.status(data.status).send(data)).catch(next)","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"  // Method to get user goal progress","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"-"},"content":"  public getUserGoalProgress \u003d (req: Request, res: Response, next: NextFunction): void \u003d\u003e {","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"-"},"content":"    const goalService \u003d new GoalService()","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"-"},"content":"    goalService.userGoalProgress(req.body.userId)","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"-"},"content":"      .then(data \u003d\u003e res.status(data.status).send(data)).catch(next)","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"-"},"content":"  // Method to get manager goal summary","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"-"},"content":"  public getManagerGoalSummary \u003d (req: Request, res: Response, next: NextFunction): void \u003d\u003e {","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"-"},"content":"    const goalService \u003d new GoalService()","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"-"},"content":"    goalService.managerGoalSummary(req.body.managerId)","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"-"},"content":"      .then(data \u003d\u003e res.status(data.status).send(data)).catch(next)","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"-"},"content":"  // Method to set a goal","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"-"},"content":"  public setGoal \u003d (req: Request, res: Response, next: NextFunction): void \u003d\u003e {","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"-"},"content":"    const goalService \u003d new GoalService()","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"-"},"content":"    goalService.setGoal(req.body)","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"-"},"content":"      .then(data \u003d\u003e res.status(data.status).send(data)).catch(next)","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"-"},"content":"  // Method to update a goal","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"-"},"content":"  public updateGoal \u003d (req: Request, res: Response, next: NextFunction): void \u003d\u003e {","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"-"},"content":"    const goalService \u003d new GoalService()","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"-"},"content":"    goalService.updateGoal(req.body)","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"-"},"content":"      .then(data \u003d\u003e res.status(data.status).send(data)).catch(next)","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"-"},"content":"  // Method to delete a goal","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"-"},"content":"  public deleteGoal \u003d (req: Request, res: Response, next: NextFunction): void \u003d\u003e {","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"-"},"content":"    const goalService \u003d new GoalService()","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"-"},"content":"    goalService.deleteGoal(req.body.id, req.body.date)","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"-"},"content":"      .then(data \u003d\u003e res.status(data.status).send(data)).catch(next)","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"-"},"content":"  // Method to add chat to a goal","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"-"},"content":"  public addGoalChat \u003d (req: Request, res: Response, next: NextFunction): void \u003d\u003e {","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"-"},"content":"    const chatService \u003d new ChatService()","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"-"},"content":"    chatService.addChatToGoal(req.body)","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"-"},"content":"      .then(data \u003d\u003e res.status(data.status).send(data)).catch(next)","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"-"},"content":"  // Method to get chat of a goal","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"-"},"content":"  public getGoalChat \u003d (req: Request, res: Response, next: NextFunction): void \u003d\u003e {","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"-"},"content":"    const chatService \u003d new ChatService()","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"-"},"content":"    chatService.getGoalChat(req.body.goalId)","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"-"},"content":"      .then(data \u003d\u003e res.status(data.status).send(data)).catch(next)","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"-"},"content":"  // Method to mark chat as read","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"-"},"content":"  public markChatAsRead \u003d (req: Request, res: Response, next: NextFunction): void \u003d\u003e {","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"-"},"content":"    const chatService \u003d new ChatService()","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"-"},"content":"    chatService.markChatAsRead(req.body.goalId)","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"-"},"content":"      .then(data \u003d\u003e res.status(data.status).send(data)).catch(next)","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"-"},"content":"  // Method to count unread messages","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"-"},"content":"  public countUnreadMessages \u003d (req: Request, res: Response, next: NextFunction): void \u003d\u003e {","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"-"},"content":"    const chatService \u003d new ChatService()","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"-"},"content":"    chatService.getUnreadChatCount(req.body.goalId)","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"-"},"content":"      .then(data \u003d\u003e res.status(data.status).send(data)).catch(next)","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"-"},"content":"  // Method to send email about expired goals","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"-"},"content":"  public ExpiredGoals \u003d (req: Request, res: Response, next: NextFunction): void \u003d\u003e {","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"-"},"content":"    const goalService \u003d new GoalService()","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"-"},"content":"    goalService.expiredEmailGoals(req.body.goalId)","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"-"},"content":"      .then(data \u003d\u003e res.status(data.status).send(data)).catch(next)","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"-"},"content":"  // Method to get goal list by category id","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"-"},"content":"  public goalListByCategoryId \u003d (req: Request, res: Response, next: NextFunction): void \u003d\u003e {","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"-"},"content":"    const goalService \u003d new GoalService()","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"-"},"content":"    goalService.getGoalListByCategoryId(req.body.categoryId)","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"-"},"content":"      .then(data \u003d\u003e res.status(data.status).send(data))","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"-"},"content":"      .catch(next)","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"-"},"content":"}","isFullCredit":false}],"authorContributionMap":{"Aditya Gaur":1,"-":124}},{"path":"src/service/AdminService.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { ActiveStatus, type IRole, type IUser, type IUserLogin, rolesCollection, User, UserLogin, userLoginsCollection, UserRole, usersCollection, VerificationStatus } from \u0027@codewalla_india/coachwalla-business-model\u0027","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { find, findByIds, findOne, findOneOrFail, save } from \u0027@codewalla_india/coachwalla-mongodb-utils\u0027","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Aditya Gaur"},"content":"import axios from \u0027axios\u0027","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"import csv from \u0027csv-parser\u0027","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"import fs from \u0027fs\u0027","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { ObjectId } from \u0027mongodb\u0027","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Aditya Gaur"},"content":"import { sendEmailUrl, uiUrl } from \u0027../config/config\u0027","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { type RegisterDTO } from \u0027../dto/RegisterUser\u0027","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { generatePassword, getRegisterResponse } from \u0027../utils/appUtils\u0027","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { decrypt } from \u0027../utils/encryptionUtils\u0027","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { sendCreatedResponse, sendErrorResponse, sendSuccessResponse } from \u0027../utils/exceptionUtils\u0027","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"import { UserService } from \u0027./UserService\u0027","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"export class AdminService {","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"  // Method to create a new user","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"  public createUser \u003d async (req: RegisterDTO): Promise\u003cany\u003e \u003d\u003e {","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"    // Check if email is provided","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"    if (req?.email.length \u003d\u003d\u003d 0) {","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"      return sendErrorResponse(\u0027Email is required\u0027)","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"    // Fetch user role","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"    const role \u003d await findOne\u003cIRole\u003e(rolesCollection, { name: UserRole.User })","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"    // Check if role exists","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"    if (role \u003d\u003d null) {","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"      return sendErrorResponse(\u0027Role not found\u0027)","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"    // Create new User and UserLogin instances","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"    const userLogin \u003d new UserLogin()","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"    const user \u003d new User()","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"    // Assign values to user properties","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"    user.firstName \u003d req.firstName","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"    user.lastName \u003d req.lastName","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"    user.email \u003d req.email","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"    user.employeeId \u003d req.employeeId","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"    user.role \u003d role","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"    user.verified \u003d req.verified ?? VerificationStatus.Verified","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"    user.active \u003d ActiveStatus.Yes","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"    user.isManager \u003d req.isManager || false","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"    user.dateHired \u003d new Date(req.dateHired)","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"-"},"content":"    user.dateOfBirth \u003d new Date(req.dateOfBirth)","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"-"},"content":"    user.address \u003d req.address ?? \u0027\u0027","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"-"},"content":"    user.jobTitle \u003d req.jobTitle","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"    user.managerIds \u003d req.managerIds?.map(id \u003d\u003e new ObjectId(id)) ?? []","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"    user.departmentIds \u003d req.departmentIds?.map(id \u003d\u003e new ObjectId(id)) ?? []","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"-"},"content":"    user.projectIds \u003d req.projectIds?.map(id \u003d\u003e new ObjectId(id)) ?? []","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"-"},"content":"    user.phoneNumber \u003d req.phoneNumber ?? \u00271234567890\u0027","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"-"},"content":"    user.careerGoal \u003d \u0027\u0027","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"-"},"content":"    user.refinedCareerGoal \u003d \u0027\u0027","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"-"},"content":"    // Assign values to userLogin properties","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"-"},"content":"    userLogin.password \u003d generatePassword()","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"-"},"content":"    userLogin.email \u003d req.email","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"-"},"content":"    userLogin.user \u003d user","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"-"},"content":"    userLogin.sessionToken \u003d []","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"-"},"content":"    // Save user and userLogin to database","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"-"},"content":"    await save\u003cIUser\u003e(usersCollection, user)","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"-"},"content":"    await save\u003cIUserLogin\u003e(userLoginsCollection, userLogin)","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"-"},"content":"    // Prepare email payload","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"-"},"content":"    const currentDate \u003d new Date().toISOString().substring(0, 10)","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"-"},"content":"    const emailPayload \u003d {","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"-"},"content":"      to: [user.email],","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"-"},"content":"      subject: \u0027Login Credentials: Coachwalla\u0027,","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"-"},"content":"      // data: createUserTemplate(user.firstName, user.email, userLogin.password, uiUrl)","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"-"},"content":"      templateData: {","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"-"},"content":"        receiver_name: user.firstName,","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"-"},"content":"        email: user.email,","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"-"},"content":"        password: decrypt(userLogin.password),","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"-"},"content":"        ui_Url: uiUrl,","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"-"},"content":"        date: currentDate","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"-"},"content":"      },","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"-"},"content":"      templateName: \u0027CreateUser\u0027","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"-"},"content":"    // call send email function","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Aditya Gaur"},"content":"    await axios.post(sendEmailUrl + \u0027/send-email\u0027, emailPayload).then((response) \u003d\u003e { console.log(\u0027Email status: \u0027 + response.status) }).catch((error) \u003d\u003e { console.log(error) })","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"-"},"content":"    // Return success response","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"-"},"content":"    return sendSuccessResponse(\u0027User created successfully\u0027, getRegisterResponse(userLogin))","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"-"},"content":"  // Method to process a row of data","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"-"},"content":"  private readonly processRow \u003d (row: any): RegisterDTO \u003d\u003e {","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"-"},"content":"    // Return an object of type RegisterDTO with properties assigned from the row data","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"-"},"content":"    return {","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"-"},"content":"      firstName: row.firstName, // Assign first name","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"-"},"content":"      lastName: row.lastName, // Assign last name","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"-"},"content":"      email: row.email, // Assign email","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"-"},"content":"      employeeId: row.employeeId, // Assign employee ID","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"-"},"content":"      isManager: row.isManager \u003d\u003d\u003d \u0027true\u0027, // Assign manager status, convert string to boolean","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"-"},"content":"      dateHired: new Date(row.dateHired), // Convert date hired to Date object","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"-"},"content":"      dateOfBirth: new Date(row.dateOfBirth), // Convert date of birth to Date object","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"-"},"content":"      address: row.address, // Assign address","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"-"},"content":"      jobTitle: row.jobTitle, // Assign job title","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"-"},"content":"      verified: VerificationStatus.Verified, // Set verification status as Verified","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"-"},"content":"      phoneNumber: row.phoneNumber // Assign phone number","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"-"},"content":"  // Method to remove duplicate users based on email, employeeId, and phoneNumber","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"-"},"content":"  private readonly removeDuplicates \u003d (users: RegisterDTO[]): RegisterDTO[] \u003d\u003e {","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"-"},"content":"    return users.filter((user, index, self) \u003d\u003e","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"-"},"content":"      index \u003d\u003d\u003d self.findIndex((u) \u003d\u003e (u.email \u003d\u003d\u003d user.email \u0026\u0026 u.employeeId \u003d\u003d\u003d user.employeeId \u0026\u0026 u.phoneNumber \u003d\u003d\u003d user.phoneNumber))","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"-"},"content":"    )","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"-"},"content":"  // Method to create multiple users","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"-"},"content":"  private readonly createUsers \u003d async (users: RegisterDTO[]): Promise\u003cvoid\u003e \u003d\u003e {","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"-"},"content":"    // Map over the users array and create a promise for each user creation","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"-"},"content":"    const createUsersPromises \u003d users.map(async user \u003d\u003e await this.createUser(user))","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"-"},"content":"    // Wait for all promises to resolve","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"-"},"content":"    await Promise.all(createUsersPromises)","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"-"},"content":"    // Log success message","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"-"},"content":"    console.log(\u0027All users created successfully\u0027)","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"-"},"content":"  // Method to create users from a CSV file","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"-"},"content":"  public createUsersFromCsv \u003d async (filePath: string): Promise\u003cany\u003e \u003d\u003e {","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"-"},"content":"    // Initialize an array to hold the users","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"-"},"content":"    let users: RegisterDTO[] \u003d []","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"-"},"content":"    // Create a read stream from the CSV file","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"-"},"content":"    await new Promise\u003cvoid\u003e((resolve, reject) \u003d\u003e {","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"-"},"content":"      fs.createReadStream(filePath)","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"-"},"content":"        .pipe(csv())","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"-"},"content":"        .on(\u0027data\u0027, (row) \u003d\u003e {","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"-"},"content":"          // Process each row and add the user to the users array","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"-"},"content":"          const user \u003d this.processRow(row)","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"-"},"content":"          users.push(user)","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"-"},"content":"        })","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"-"},"content":"        .on(\u0027end\u0027, () \u003d\u003e {","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"-"},"content":"          // Resolve the promise when the stream ends","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"-"},"content":"          resolve()","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"-"},"content":"        })","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"-"},"content":"        .on(\u0027error\u0027, (error) \u003d\u003e {","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"-"},"content":"          // Reject the promise if there\u0027s an error","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"-"},"content":"          reject(error)","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"-"},"content":"        })","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"-"},"content":"    })","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"-"},"content":"    try {","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"-"},"content":"      // Remove duplicate users","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"-"},"content":"      users \u003d this.removeDuplicates(users)","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"-"},"content":"      // Create the users","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"-"},"content":"      await this.createUsers(users)","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"-"},"content":"    } catch (error) {","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"-"},"content":"      // Log any errors and rethrow them","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"-"},"content":"      console.error(\u0027Error creating users\u0027, error)","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"-"},"content":"      throw error","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"-"},"content":"    // Delete the uploaded file","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"-"},"content":"    await this.unlinkUploadedFile(filePath)","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"-"},"content":"    // Return a success response","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"-"},"content":"    return sendCreatedResponse(\u0027Users created successfully\u0027)","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"-"},"content":"  // Method to delete an uploaded file","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"-"},"content":"  private readonly unlinkUploadedFile \u003d async (filePath: string): Promise\u003cvoid\u003e \u003d\u003e {","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"-"},"content":"    // Delete the uploaded file","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"-"},"content":"    fs.unlink(filePath, (err) \u003d\u003e {","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"-"},"content":"      if (err !\u003d null) {","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"-"},"content":"        // Log any errors","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"-"},"content":"        console.error(\u0027Error deleting file:\u0027, err)","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"-"},"content":"      } else {","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"-"},"content":"        // Log a success message","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"-"},"content":"        console.log(\u0027Successfully deleted file:\u0027, filePath)","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"-"},"content":"      }","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"-"},"content":"    })","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"-"},"content":"  // Method to reset a user\u0027s password and email it to them","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"-"},"content":"  public resetAndEmailPassword \u003d async (userId: string): Promise\u003cany\u003e \u003d\u003e {","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"-"},"content":"    // Fetch the user and their login details","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"-"},"content":"    const user \u003d await findOneOrFail\u003cIUser\u003e(usersCollection, { _id: new ObjectId(userId) })","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"-"},"content":"    const userLogin \u003d await findOneOrFail\u003cIUserLogin\u003e(userLoginsCollection, { email: user.email })","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"-"},"content":"    const currentDate \u003d new Date().toISOString().substring(0, 10)","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"-"},"content":"    // Generate a new password and save it","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"-"},"content":"    userLogin.password \u003d generatePassword()","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"-"},"content":"    await save\u003cIUserLogin\u003e(userLoginsCollection, userLogin)","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"-"},"content":"    // Prepare the email payload","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"-"},"content":"    const emailPayload \u003d {","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"-"},"content":"      to: [user.email],","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"-"},"content":"      subject: \u0027Reset Password: Coachwalla\u0027,","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"-"},"content":"      // data: resetAndEmailPasswordTemplate(user.firstName, user.email, userLogin.password, uiUrl)","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"-"},"content":"      templateData: {","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"-"},"content":"        receiver_name: user.firstName,","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"-"},"content":"        password: decrypt(userLogin.password),","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"-"},"content":"        ui_Url: uiUrl,","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"-"},"content":"        date: currentDate","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"-"},"content":"      },","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"-"},"content":"      templateName: \u0027ResetPassword\u0027","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"-"},"content":"    }","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"-"},"content":"    // Send the email","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"Aditya Gaur"},"content":"    await axios.post(sendEmailUrl + \u0027/send-email\u0027, emailPayload).then((response) \u003d\u003e { console.log(\u0027Email status: \u0027 + response.status) }).catch((error) \u003d\u003e { console.log(error) })","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"-"},"content":"    // Return a success response","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"-"},"content":"    return sendSuccessResponse(\u0027PASSWORD_EMAIL_SENT_SUCCESSFULLY\u0027)","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"-"},"content":"  // Method to make a user an admin","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"-"},"content":"  public makeUserAdmin \u003d async (id: string): Promise\u003cany\u003e \u003d\u003e {","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"-"},"content":"    // Fetch the user, their login details, and the admin role","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"-"},"content":"    const user \u003d await findOneOrFail\u003cIUser\u003e(usersCollection, { _id: new ObjectId(id) })","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"-"},"content":"    const userLogin \u003d await findOneOrFail\u003cIUserLogin\u003e(userLoginsCollection, { email: user.email })","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"-"},"content":"    const role \u003d await findOneOrFail\u003cIRole\u003e(rolesCollection, { name: UserRole.Admin })","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"-"},"content":"    // Assign the admin role to the user and save the changes","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"-"},"content":"    user.role \u003d role","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"-"},"content":"    userLogin.user \u003d user","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"-"},"content":"    await save\u003cIUser\u003e(usersCollection, user)","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"-"},"content":"    await save\u003cIUserLogin\u003e(userLoginsCollection, userLogin)","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":221,"author":{"gitId":"-"},"content":"    // Return a success response","isFullCredit":false},{"lineNumber":222,"author":{"gitId":"-"},"content":"    return sendSuccessResponse(\u0027User made admin successfully\u0027)","isFullCredit":false},{"lineNumber":223,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":224,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":225,"author":{"gitId":"-"},"content":"  // Method to fetch all users with pending verification","isFullCredit":false},{"lineNumber":226,"author":{"gitId":"-"},"content":"  public getAllPendingUsers \u003d async (): Promise\u003cany\u003e \u003d\u003e {","isFullCredit":false},{"lineNumber":227,"author":{"gitId":"-"},"content":"    // Fetch the users","isFullCredit":false},{"lineNumber":228,"author":{"gitId":"-"},"content":"    const users \u003d await find\u003cIUser\u003e(usersCollection, { verified: VerificationStatus.Pending })","isFullCredit":false},{"lineNumber":229,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":230,"author":{"gitId":"-"},"content":"    // Return the users","isFullCredit":false},{"lineNumber":231,"author":{"gitId":"-"},"content":"    return {","isFullCredit":false},{"lineNumber":232,"author":{"gitId":"-"},"content":"      message: \u0027Users fetched successfully\u0027,","isFullCredit":false},{"lineNumber":233,"author":{"gitId":"-"},"content":"      success: true,","isFullCredit":false},{"lineNumber":234,"author":{"gitId":"-"},"content":"      status: 200,","isFullCredit":false},{"lineNumber":235,"author":{"gitId":"-"},"content":"      data: users","isFullCredit":false},{"lineNumber":236,"author":{"gitId":"-"},"content":"    }","isFullCredit":false},{"lineNumber":237,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":238,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":239,"author":{"gitId":"-"},"content":"  // Method to verify a user","isFullCredit":false},{"lineNumber":240,"author":{"gitId":"-"},"content":"  public verifyUser \u003d async (id: string): Promise\u003cany\u003e \u003d\u003e {","isFullCredit":false},{"lineNumber":241,"author":{"gitId":"-"},"content":"    // Fetch the user and their login details","isFullCredit":false},{"lineNumber":242,"author":{"gitId":"-"},"content":"    const user \u003d await findOneOrFail\u003cIUser\u003e(usersCollection, { _id: new ObjectId(id) })","isFullCredit":false},{"lineNumber":243,"author":{"gitId":"-"},"content":"    const userLogin \u003d await findOneOrFail\u003cIUserLogin\u003e(userLoginsCollection, { email: user.email })","isFullCredit":false},{"lineNumber":244,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":245,"author":{"gitId":"-"},"content":"    // Set the user\u0027s verification status to Verified and save the changes","isFullCredit":false},{"lineNumber":246,"author":{"gitId":"-"},"content":"    user.verified \u003d VerificationStatus.Verified","isFullCredit":false},{"lineNumber":247,"author":{"gitId":"-"},"content":"    userLogin.user \u003d user","isFullCredit":false},{"lineNumber":248,"author":{"gitId":"-"},"content":"    await save\u003cIUser\u003e(usersCollection, user)","isFullCredit":false},{"lineNumber":249,"author":{"gitId":"-"},"content":"    await save\u003cIUserLogin\u003e(userLoginsCollection, userLogin)","isFullCredit":false},{"lineNumber":250,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":251,"author":{"gitId":"-"},"content":"    // Return a success response","isFullCredit":false},{"lineNumber":252,"author":{"gitId":"-"},"content":"    return sendSuccessResponse(\u0027User verified successfully\u0027)","isFullCredit":false},{"lineNumber":253,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":254,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":255,"author":{"gitId":"-"},"content":"  // Method to fetch all users managed by a specific manager","isFullCredit":false},{"lineNumber":256,"author":{"gitId":"-"},"content":"  public getAllUsers \u003d async (managerId: string, page: string, pageSize: string, userName?: string, projectId?: string): Promise\u003cany\u003e \u003d\u003e {","isFullCredit":false},{"lineNumber":257,"author":{"gitId":"-"},"content":"    // Create a new UserService instance","isFullCredit":false},{"lineNumber":258,"author":{"gitId":"-"},"content":"    const userService \u003d new UserService()","isFullCredit":false},{"lineNumber":259,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":260,"author":{"gitId":"-"},"content":"    // Fetch the users and process them","isFullCredit":false},{"lineNumber":261,"author":{"gitId":"-"},"content":"    const userList \u003d await userService.getUsersFromManagerId(managerId, page, pageSize, userName, projectId)","isFullCredit":false},{"lineNumber":262,"author":{"gitId":"-"},"content":"    const modifiedUsers \u003d await userService.processUserWithDepartmentsAndProjects(userList.data)","isFullCredit":false},{"lineNumber":263,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":264,"author":{"gitId":"-"},"content":"    // Return a success response with the users","isFullCredit":false},{"lineNumber":265,"author":{"gitId":"-"},"content":"    return sendSuccessResponse(\u0027Users fetched successfully\u0027, modifiedUsers)","isFullCredit":false},{"lineNumber":266,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":267,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":268,"author":{"gitId":"-"},"content":"  // Method to update a user\u0027s profile","isFullCredit":false},{"lineNumber":269,"author":{"gitId":"-"},"content":"  public updateUserProfile \u003d async (id: string, managerIds: string[], dateOfBirth: Date): Promise\u003cany\u003e \u003d\u003e {","isFullCredit":false},{"lineNumber":270,"author":{"gitId":"-"},"content":"    // Fetch the user, their login details, and their managers","isFullCredit":false},{"lineNumber":271,"author":{"gitId":"-"},"content":"    const user \u003d await findOneOrFail\u003cIUser\u003e(usersCollection, { _id: new ObjectId(id) })","isFullCredit":false},{"lineNumber":272,"author":{"gitId":"-"},"content":"    const managers \u003d await findByIds\u003cIUser\u003e(usersCollection, managerIds)","isFullCredit":false},{"lineNumber":273,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":274,"author":{"gitId":"-"},"content":"    // Initialize an array to hold the managers","isFullCredit":false},{"lineNumber":275,"author":{"gitId":"-"},"content":"    const managerList: IUser[] \u003d []","isFullCredit":false},{"lineNumber":276,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":277,"author":{"gitId":"-"},"content":"    // For each manager, set their isManager property to true and add their ID to the user\u0027s managerIds array","isFullCredit":false},{"lineNumber":278,"author":{"gitId":"-"},"content":"    for (const manager of managers) {","isFullCredit":false},{"lineNumber":279,"author":{"gitId":"-"},"content":"      manager.isManager \u003d true","isFullCredit":false},{"lineNumber":280,"author":{"gitId":"-"},"content":"      user.managerIds.push(manager._id)","isFullCredit":false},{"lineNumber":281,"author":{"gitId":"-"},"content":"      managerList.push(manager)","isFullCredit":false},{"lineNumber":282,"author":{"gitId":"-"},"content":"    }","isFullCredit":false},{"lineNumber":283,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":284,"author":{"gitId":"-"},"content":"    // Fetch the user\u0027s login details","isFullCredit":false},{"lineNumber":285,"author":{"gitId":"-"},"content":"    const userLogin \u003d await findOneOrFail\u003cIUserLogin\u003e(userLoginsCollection, { email: user.email })","isFullCredit":false},{"lineNumber":286,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":287,"author":{"gitId":"-"},"content":"    // If a date of birth is provided, update the user\u0027s date of birth","isFullCredit":false},{"lineNumber":288,"author":{"gitId":"-"},"content":"    if (dateOfBirth !\u003d null || dateOfBirth !\u003d\u003d undefined) {","isFullCredit":false},{"lineNumber":289,"author":{"gitId":"-"},"content":"      user.dateOfBirth \u003d new Date(dateOfBirth)","isFullCredit":false},{"lineNumber":290,"author":{"gitId":"-"},"content":"    }","isFullCredit":false},{"lineNumber":291,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":292,"author":{"gitId":"-"},"content":"    // Save the changes to the user, the managers, and the user\u0027s login details","isFullCredit":false},{"lineNumber":293,"author":{"gitId":"-"},"content":"    userLogin.user \u003d user","isFullCredit":false},{"lineNumber":294,"author":{"gitId":"-"},"content":"    await save\u003cIUser\u003e(usersCollection, user)","isFullCredit":false},{"lineNumber":295,"author":{"gitId":"-"},"content":"    await save\u003cIUser\u003e(usersCollection, managerList)","isFullCredit":false},{"lineNumber":296,"author":{"gitId":"-"},"content":"    await save\u003cIUserLogin\u003e(userLoginsCollection, userLogin)","isFullCredit":false},{"lineNumber":297,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":298,"author":{"gitId":"-"},"content":"    // Return a success response","isFullCredit":false},{"lineNumber":299,"author":{"gitId":"-"},"content":"    return sendSuccessResponse(\u0027User profile updated successfully\u0027)","isFullCredit":false},{"lineNumber":300,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":301,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":302,"author":{"gitId":"-"},"content":"  // Method to remove a manager from a user","isFullCredit":false},{"lineNumber":303,"author":{"gitId":"-"},"content":"  public removeUserManager \u003d async (userId: string, managerId: string): Promise\u003cany\u003e \u003d\u003e {","isFullCredit":false},{"lineNumber":304,"author":{"gitId":"-"},"content":"    // Fetch the user and their login details","isFullCredit":false},{"lineNumber":305,"author":{"gitId":"-"},"content":"    const user \u003d await findOneOrFail\u003cIUser\u003e(usersCollection, { _id: new ObjectId(userId) })","isFullCredit":false},{"lineNumber":306,"author":{"gitId":"-"},"content":"    const userLogin \u003d await findOneOrFail\u003cIUserLogin\u003e(userLoginsCollection, { email: user.email })","isFullCredit":false},{"lineNumber":307,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":308,"author":{"gitId":"-"},"content":"    // Remove the manager from the user\u0027s managerIds array","isFullCredit":false},{"lineNumber":309,"author":{"gitId":"-"},"content":"    user.managerIds \u003d user.managerIds.filter((id) \u003d\u003e id.toString() !\u003d\u003d managerId)","isFullCredit":false},{"lineNumber":310,"author":{"gitId":"-"},"content":"    userLogin.user \u003d user","isFullCredit":false},{"lineNumber":311,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":312,"author":{"gitId":"-"},"content":"    // Save the changes to the user and their login details","isFullCredit":false},{"lineNumber":313,"author":{"gitId":"-"},"content":"    await save\u003cIUser\u003e(usersCollection, user)","isFullCredit":false},{"lineNumber":314,"author":{"gitId":"-"},"content":"    await save\u003cIUserLogin\u003e(userLoginsCollection, userLogin)","isFullCredit":false},{"lineNumber":315,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":316,"author":{"gitId":"-"},"content":"    // Return a success response","isFullCredit":false},{"lineNumber":317,"author":{"gitId":"-"},"content":"    return sendSuccessResponse(\u0027User manager removed successfully\u0027)","isFullCredit":false},{"lineNumber":318,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":319,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":320,"author":{"gitId":"-"},"content":"  // Method to remove a user","isFullCredit":false},{"lineNumber":321,"author":{"gitId":"-"},"content":"  public removeUser \u003d async (id: string): Promise\u003cany\u003e \u003d\u003e {","isFullCredit":false},{"lineNumber":322,"author":{"gitId":"-"},"content":"    // Fetch the user and their login details","isFullCredit":false},{"lineNumber":323,"author":{"gitId":"-"},"content":"    const user \u003d await findOneOrFail\u003cIUser\u003e(usersCollection, { _id: new ObjectId(id) })","isFullCredit":false},{"lineNumber":324,"author":{"gitId":"-"},"content":"    const userLogin \u003d await findOneOrFail\u003cIUserLogin\u003e(userLoginsCollection, { email: user.email })","isFullCredit":false},{"lineNumber":325,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":326,"author":{"gitId":"-"},"content":"    // Set the user\u0027s active status to No","isFullCredit":false},{"lineNumber":327,"author":{"gitId":"-"},"content":"    user.active \u003d ActiveStatus.No","isFullCredit":false},{"lineNumber":328,"author":{"gitId":"-"},"content":"    userLogin.user \u003d user","isFullCredit":false},{"lineNumber":329,"author":{"gitId":"-"},"content":"    userLogin.sessionToken \u003d []","isFullCredit":false},{"lineNumber":330,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":331,"author":{"gitId":"-"},"content":"    // Save the changes to the user and their login details","isFullCredit":false},{"lineNumber":332,"author":{"gitId":"-"},"content":"    await save\u003cIUser\u003e(usersCollection, user)","isFullCredit":false},{"lineNumber":333,"author":{"gitId":"-"},"content":"    await save\u003cIUserLogin\u003e(userLoginsCollection, userLogin)","isFullCredit":false},{"lineNumber":334,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":335,"author":{"gitId":"-"},"content":"    // Return a success response","isFullCredit":false},{"lineNumber":336,"author":{"gitId":"-"},"content":"    return sendSuccessResponse(\u0027User removed successfully\u0027)","isFullCredit":false},{"lineNumber":337,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":338,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":339,"author":{"gitId":"-"},"content":"  // Method to fetch all active managers","isFullCredit":false},{"lineNumber":340,"author":{"gitId":"-"},"content":"  public getAllManager \u003d async (): Promise\u003cany\u003e \u003d\u003e {","isFullCredit":false},{"lineNumber":341,"author":{"gitId":"-"},"content":"    // Fetch the managers","isFullCredit":false},{"lineNumber":342,"author":{"gitId":"-"},"content":"    const managers \u003d await find\u003cIUser\u003e(usersCollection, { isManager: true, active: ActiveStatus.Yes })","isFullCredit":false},{"lineNumber":343,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":344,"author":{"gitId":"-"},"content":"    // Return a success response with the managers","isFullCredit":false},{"lineNumber":345,"author":{"gitId":"-"},"content":"    return sendSuccessResponse(\u0027Managers fetched successfully\u0027, managers)","isFullCredit":false},{"lineNumber":346,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":347,"author":{"gitId":"-"},"content":"}","isFullCredit":false}],"authorContributionMap":{"Aditya Gaur":4,"-":343}},{"path":"src/service/CalenderViewService.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"Aditya Gaur"},"content":"import { CalenderViewEvent, type ICalenderViewEvent, calenderViewEventsCollection } from \u0027@codewalla_india/coachwalla-business-model\u0027","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { find, getUserLogin, save } from \u0027@codewalla_india/coachwalla-mongodb-utils\u0027","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { type CalenderViewCreateEvent } from \u0027../dto/CalenderViewCreateEvent\u0027","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { sendErrorResponse, sendSuccessResponse } from \u0027../utils/exceptionUtils\u0027","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"export class CalenderViewService {","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"  public createEvent \u003d async (req: CalenderViewCreateEvent): Promise\u003cany\u003e \u003d\u003e {","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"    try {","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Aditya Gaur"},"content":"      // Destucture the request","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"      const { managerId, attendeeIds, meetingLink, meetingDate, meetingStartTime, meetingEndTime, topics, agenda } \u003d req","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"      // Assign the request values to a new instance of the CalenderViewEvent class","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"      const event \u003d new CalenderViewEvent()","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"      event.managerId \u003d managerId","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"      event.attendeeIds \u003d attendeeIds ?? \u0027\u0027","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"      event.meetingLink \u003d meetingLink","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"      event.meetingDate \u003d meetingDate","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"      event.meetingStartTime \u003d meetingStartTime","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"      event.meetingEndTime \u003d meetingEndTime","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"      event.topics \u003d topics ?? \u0027\u0027","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"      event.agenda \u003d agenda ?? \u0027\u0027","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"      await save\u003cICalenderViewEvent\u003e(calenderViewEventsCollection, event)","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"      // Return a success response with the URLs","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"      return sendSuccessResponse(\u0027Event created successfully.\u0027)","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"    } catch (err) {","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"      // If an error occurs, log it","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"      return sendErrorResponse(\u0027Event not created.\u0027)","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"  public showEvent \u003d async (): Promise\u003cany\u003e \u003d\u003e {","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"    try {","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"      // Destructure the request","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"      const userLogin \u003d getUserLogin()","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"      const currentUserId \u003d userLogin.user._id.toString()","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"      // Find all events with the userId, userId may also be managerId","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"      const events \u003d await find\u003cICalenderViewEvent\u003e(calenderViewEventsCollection, {","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"        $or: [{ managerId: currentUserId }, { attendeeIds: { $in: [currentUserId] } }]","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"      })","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"-"},"content":"      if (events \u003d\u003d\u003d null) {","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return sendErrorResponse(\u0027Events not found.\u0027)","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"      } else {","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // Return a success response with the events","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return sendSuccessResponse(\u0027Events fetched successfully.\u0027, events)","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"-"},"content":"      }","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"-"},"content":"    } catch (err) {","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"-"},"content":"      // If an error occurs, log it","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"-"},"content":"      return sendErrorResponse(\u0027Events not fetched.\u0027)","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","isFullCredit":false}],"authorContributionMap":{"Aditya Gaur":2,"-":53}},{"path":"src/service/ChatService.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { ActiveStatus, ChatStatus, type IChat, type IGoal, type IUser, goalsCollection, usersCollection } from \u0027@codewalla_india/coachwalla-business-model\u0027","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { findOne, findOneOrFail, getUserLogin, save } from \u0027@codewalla_india/coachwalla-mongodb-utils\u0027","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Aditya Gaur"},"content":"import axios from \u0027axios\u0027","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { ObjectId } from \u0027mongodb\u0027","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Aditya Gaur"},"content":"import { sendEmailUrl, uiUrl } from \u0027../config/config\u0027","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { type ChatDto } from \u0027../dto/ChatDTO\u0027","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { decrypt, encrypt } from \u0027../utils/encryptionUtils\u0027","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { sendErrorResponse, sendSuccessResponse } from \u0027../utils/exceptionUtils\u0027","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"export class ChatService {","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"  // Method to get a goal by its ID","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"  private readonly getGoal \u003d async (goalId: string): Promise\u003cIGoal | null\u003e \u003d\u003e {","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"    // Find the goal in the goals collection where the ID matches the provided goal ID and the goal is active","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"    return await findOne\u003cIGoal\u003e(goalsCollection, { _id: new ObjectId(goalId), active: ActiveStatus.Yes })","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"  // Method to get the role of a user in relation to a goal","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"  public getRole \u003d (goal: IGoal): string \u003d\u003e {","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"    // Get the current user login details","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"    const userLogin \u003d getUserLogin()","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"    // If the manager ID of the goal matches the user ID of the logged in user, return \u0027COACH\u0027, otherwise return \u0027USER\u0027","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"    return goal.managerId \u003d\u003d\u003d userLogin.user._id.toString() ? \u0027COACH\u0027 : \u0027USER\u0027","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"  // Method to add a chat to a goal","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"  public addChatToGoal \u003d async (req: ChatDto): Promise\u003cany\u003e \u003d\u003e {","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"    // Destructure the goal ID, sender ID, date, and message from the request","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"    const { goalId, senderId, date, message, isComment } \u003d req","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"    // Get the goal by its ID","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"    const goal \u003d await this.getGoal(goalId)","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"    // If the goal does not exist, return an error response","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"    if (goal \u003d\u003d null) return sendErrorResponse(\u0027GOAL_NOT_FOUND\u0027)","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"    // Fetch the sender\u0027s details","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"    const senderDetails \u003d await findOne\u003cIUser\u003e(usersCollection, { _id: new ObjectId(senderId) })","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"    // Create a new chat with the sender, encrypted message, timestamp, and status","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"    const chat: IChat \u003d {","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"      sender: goal.managerId \u003d\u003d\u003d senderId ? \u0027COACH\u0027 : \u0027USER\u0027,","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"      senderName: senderDetails?.firstName + \u0027 \u0027 + senderDetails?.lastName,","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"      message: encrypt(message),","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"      timestamp: new Date(date),","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"-"},"content":"      status: ChatStatus.UNREAD,","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"-"},"content":"      isComment: isComment ?? false","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"    // If the goal does not have any chats, initialize an empty array","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"-"},"content":"    goal.chats \u003d goal.chats ?? []","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"-"},"content":"    // Add the new chat to the goal\u0027s chats","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"-"},"content":"    goal.chats.push(chat)","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"-"},"content":"    // Save the updated goal to the goals collection","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"-"},"content":"    await save\u003cIGoal\u003e(goalsCollection, goal)","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"-"},"content":"    // Find the user and manager in the users collection where the ID matches the user ID and manager ID of the goal and the user is active","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"-"},"content":"    const user \u003d await findOneOrFail\u003cIUser\u003e(usersCollection, { _id: new ObjectId(goal.userId), active: ActiveStatus.Yes })","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"-"},"content":"    const manager \u003d await findOneOrFail\u003cIUser\u003e(usersCollection, { _id: new ObjectId(goal.managerId), active: ActiveStatus.Yes })","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"-"},"content":"    const currentDate \u003d new Date().toISOString().substring(0, 10)","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"-"},"content":"    // Initialize an empty object for the email payload for the notification","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"-"},"content":"    let emailPayloadForNotification \u003d {}","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"-"},"content":"    // If the sender of the chat is the coach","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"-"},"content":"    if (chat.sender \u003d\u003d\u003d \u0027COACH\u0027) {","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"-"},"content":"      // Set the email payload for the notification to the user\u0027s email, with the subject \u0027New message: Coachwalla\u0027, and the manager\u0027s email in CC","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"-"},"content":"      emailPayloadForNotification \u003d {","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"-"},"content":"        to: [user?.email],","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"-"},"content":"        subject: \u0027New message: Coachwalla\u0027,","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"-"},"content":"        templateData: {","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"-"},"content":"          receiver_name: user.firstName,","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"-"},"content":"          goalName: decrypt(goal.goalName),","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"-"},"content":"          ui_Url: uiUrl,","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"-"},"content":"          date: currentDate","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"-"},"content":"        },","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"-"},"content":"        templateName: \u0027ChatNotification\u0027","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"-"},"content":"      }","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"-"},"content":"    } else {","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"-"},"content":"      // Otherwise, set the email payload for the notification to the manager\u0027s email, with the subject \u0027New message: Coachwalla\u0027, and the user\u0027s email in CC","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"-"},"content":"      emailPayloadForNotification \u003d {","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"-"},"content":"        to: [manager?.email],","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"-"},"content":"        subject: \u0027New message: Coachwalla\u0027,","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"-"},"content":"        templateData: {","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"-"},"content":"          receiver_name: manager.firstName,","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"-"},"content":"          goalName: decrypt(goal.goalName),","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"-"},"content":"          ui_Url: uiUrl,","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"-"},"content":"          date: currentDate","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"-"},"content":"        },","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"-"},"content":"        templateName: \u0027ChatNotification\u0027","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"-"},"content":"      }","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"-"},"content":"    // Send an email notification to the receiver\u0027s email about the new chat","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Aditya Gaur"},"content":"    await axios.post(sendEmailUrl + \u0027/send-email\u0027, emailPayloadForNotification).then((response) \u003d\u003e { console.log(\u0027Email status: \u0027 + response.status) }).catch((error) \u003d\u003e { console.log(error) })","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"-"},"content":"    // Return a success response","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"-"},"content":"    return sendSuccessResponse(\u0027CHAT_ADDED_SUCCESSFULLY\u0027)","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"-"},"content":"  // Method to get the chats of a goal","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"-"},"content":"  public getGoalChat \u003d async (goalId: string): Promise\u003cany\u003e \u003d\u003e {","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"-"},"content":"    // Get the goal by its ID","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"-"},"content":"    const goal \u003d await this.getGoal(goalId)","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"-"},"content":"    // If the goal does not exist, return an error response","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"-"},"content":"    if (goal \u003d\u003d null) return sendErrorResponse(\u0027GOAL_NOT_FOUND\u0027)","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"-"},"content":"    // Get the chats of the goal, or an empty array if there are no chats","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"-"},"content":"    const chats \u003d goal.chats ?? []","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"-"},"content":"    // Return a success response with the chats","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"-"},"content":"    return sendSuccessResponse(\u0027GOAL_CHAT_FETCHED_SUCCESSFULLY\u0027, chats)","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"-"},"content":"  // Method to mark a chat as read","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"-"},"content":"  public markChatAsRead \u003d async (goalId: string): Promise\u003cany\u003e \u003d\u003e {","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"-"},"content":"    // Get the goal by its ID","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"-"},"content":"    const goal \u003d await this.getGoal(goalId)","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"-"},"content":"    // If the goal does not exist, return an error response","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"-"},"content":"    if (goal \u003d\u003d null) return sendErrorResponse(\u0027GOAL_NOT_FOUND\u0027)","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"-"},"content":"    // Get the role of the user in relation to the goal","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"-"},"content":"    const role \u003d this.getRole(goal)","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"-"},"content":"    // Map the chats of the goal to a new array where the status of the chat is \u0027READ\u0027 if the sender is not the user and the status was \u0027UNREAD\u0027","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"-"},"content":"    goal.chats \u003d goal.chats?.map((chat: IChat) \u003d\u003e {","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"-"},"content":"      if (chat.sender !\u003d\u003d role \u0026\u0026 chat.status \u003d\u003d\u003d ChatStatus.UNREAD) {","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"-"},"content":"        chat.status \u003d ChatStatus.READ","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"-"},"content":"      }","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"-"},"content":"      return chat","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }) ?? []","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"-"},"content":"    // Save the updated goal to the goals collection","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"-"},"content":"    await save\u003cIGoal\u003e(goalsCollection, goal)","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"-"},"content":"    // Return a success response","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"-"},"content":"    return sendSuccessResponse(\u0027CHAT_MARKED_AS_READ_SUCCESSFULLY\u0027)","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"-"},"content":"  // Method to get the count of unread chats","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"-"},"content":"  public getUnreadChatCount \u003d async (goalId: string): Promise\u003cany\u003e \u003d\u003e {","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"-"},"content":"    // Get the goal by its ID","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"-"},"content":"    const goal \u003d await this.getGoal(goalId)","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"-"},"content":"    // If the goal does not exist, return an error response","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"-"},"content":"    if (goal \u003d\u003d null) return sendErrorResponse(\u0027GOAL_NOT_FOUND\u0027)","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"-"},"content":"    // Get the role of the user in relation to the goal","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"-"},"content":"    const role \u003d this.getRole(goal)","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"-"},"content":"    // Reduce the chats of the goal to a count of the chats where the sender is not the user and the status is \u0027UNREAD\u0027","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"-"},"content":"    const unreadCount \u003d (goal.chats ?? []).reduce((count: number, chat: IChat) \u003d\u003e {","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"-"},"content":"      if (chat.sender !\u003d\u003d role \u0026\u0026 chat.status \u003d\u003d\u003d ChatStatus.UNREAD) {","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"-"},"content":"        count++","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"-"},"content":"      }","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"-"},"content":"      return count","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }, 0)","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"-"},"content":"    // Return a success response with the count of unread chats","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"-"},"content":"    return sendSuccessResponse(\u0027UNREAD_MESSAGES_COUNT_FETCHED_SUCCESSFULLY\u0027, unreadCount)","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"-"},"content":"}","isFullCredit":false}],"authorContributionMap":{"Aditya Gaur":3,"-":154}},{"path":"src/service/GoalService.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { ActiveStatus, ChatStatus, Goal, goalsCollection, GoalStatus, type IChat, type IGoal, type IScoreCardCategory, type IUser, scorecardsCategoryCollection, usersCollection } from \u0027@codewalla_india/coachwalla-business-model\u0027","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { find, findByIds, findOne, findOneOrFail, getUserLogin, save } from \u0027@codewalla_india/coachwalla-mongodb-utils\u0027","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Aditya Gaur"},"content":"import axios from \u0027axios\u0027","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { ObjectId } from \u0027mongodb\u0027","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Aditya Gaur"},"content":"import { sendEmailUrl, uiUrl } from \u0027../config/config\u0027","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { type EmployeeFeedback } from \u0027../dto/EmployeeFeedback\u0027","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { type GoalRequest } from \u0027../dto/SetGoalRequest\u0027","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { decrypt, encrypt } from \u0027../utils/encryptionUtils\u0027","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { sendErrorResponse, sendSuccessResponse } from \u0027../utils/exceptionUtils\u0027","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { ChatService } from \u0027./ChatService\u0027","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { UserService } from \u0027./UserService\u0027","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"const userService \u003d new UserService()","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"const chatService \u003d new ChatService()","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"export class GoalService {","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"  // Method to set a goal","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"  public setGoal \u003d async (req: GoalRequest): Promise\u003cany\u003e \u003d\u003e {","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"    // Destructure the userId, managerId, goalName, date, targetDate, categoryId, isSmart, and isIdeal from the request","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"    const { userId, managerId, goalName, date, targetDate, categoryId, isSmart, isIdeal } \u003d req","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"    // Find the manager, user, and category by their IDs or fail if they do not exist","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"    const manager \u003d await findOneOrFail\u003cIUser\u003e(usersCollection, { _id: new ObjectId(String(managerId)) })","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"    const user \u003d await findOneOrFail\u003cIUser\u003e(usersCollection, { _id: new ObjectId(String(userId)) })","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"    const category \u003d await findOneOrFail\u003cIScoreCardCategory\u003e(scorecardsCategoryCollection, { _id: new ObjectId(String(categoryId)) })","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"    const currentDate \u003d new Date().toISOString().substring(0, 10)","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"    // If the manager is not a manager, return an error response","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"    if (!manager?.isManager) {","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"      return sendErrorResponse(\u0027You do not have permission to perform this action\u0027)","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"    // If the user does not exist, return an error response","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"    if (user \u003d\u003d null) {","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"      return sendErrorResponse(\u0027User not found\u0027)","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"    // Create a new goal","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"    const newGoal \u003d new Goal()","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"    newGoal.goalName \u003d encrypt(goalName)","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"    newGoal.createdDate \u003d new Date(date)","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"    newGoal.isMeasurable \u003d isSmart","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"-"},"content":"    newGoal.isIdeal \u003d isIdeal","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"-"},"content":"    newGoal.targetDate \u003d new Date(targetDate)","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"-"},"content":"    newGoal.managerId \u003d managerId","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"    newGoal.userId \u003d userId","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"    newGoal.updatedBy \u003d managerId","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"-"},"content":"    newGoal.updatedDate \u003d new Date(date)","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"-"},"content":"    newGoal.managerFeedback \u003d encrypt(\u0027\u0027)","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"-"},"content":"    newGoal.rating \u003d encrypt(\u00270\u0027)","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"-"},"content":"    newGoal.userFeedback \u003d encrypt(\u0027\u0027)","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"-"},"content":"    newGoal.submitted \u003d ActiveStatus.No","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"-"},"content":"    newGoal.active \u003d ActiveStatus.Yes","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"-"},"content":"    newGoal.category \u003d category","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"-"},"content":"    newGoal.chats \u003d []","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"-"},"content":"    newGoal.accepted \u003d ActiveStatus.No","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"-"},"content":"    newGoal.rejected \u003d ActiveStatus.No","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"-"},"content":"    newGoal.status \u003d GoalStatus.TO_DO","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"-"},"content":"    // Save the new goal","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"-"},"content":"    await save\u003cIGoal\u003e(goalsCollection, newGoal)","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"-"},"content":"    // Prepare the email payload","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"-"},"content":"    const emailPayload \u003d {","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"-"},"content":"      to: [user.email],","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"-"},"content":"      subject: \u0027New Goal: Coachwalla\u0027,","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"-"},"content":"      // data: goalCreatedTemplate(user.firstName, decrypt(newGoal.goalName), uiUrl, manager.firstName + \u0027 \u0027 + manager.lastName)","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"-"},"content":"      templateData: {","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"-"},"content":"        receiver_name: user.firstName,","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"-"},"content":"        goalName: decrypt(newGoal.goalName),","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"-"},"content":"        ui_Url: uiUrl,","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"-"},"content":"        coach: manager.firstName + \u0027 \u0027 + manager.lastName,","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"-"},"content":"        date: currentDate","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"-"},"content":"      },","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"-"},"content":"      templateName: \u0027GoalCreated\u0027","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"-"},"content":"    // Send the email","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Aditya Gaur"},"content":"    await axios.post(sendEmailUrl + \u0027/send-email\u0027, emailPayload).then((response) \u003d\u003e { console.log(\u0027Email status: \u0027 + response.status) }).catch((error) \u003d\u003e { console.log(error) })","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Aditya Gaur"},"content":"","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"-"},"content":"    // Return a success response","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"-"},"content":"    return sendSuccessResponse(\u0027GOAL_SET_SUCCESSFULLY\u0027, newGoal)","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"-"},"content":"  // Method to update a goal","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"-"},"content":"  public updateGoal \u003d async (req: any): Promise\u003cany\u003e \u003d\u003e {","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"-"},"content":"    // Get the user login details","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"-"},"content":"    const userLogin \u003d getUserLogin()","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"-"},"content":"    // Check if the user is a manager, if not return an error response","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"-"},"content":"    if (!await userService.checkIfManager(userLogin.user._id)) {","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"-"},"content":"      return sendErrorResponse(\u0027Unauthorized access\u0027)","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"-"},"content":"    // Destructure the request object","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"-"},"content":"    const { goalId, date, managerId, managerRemark, rating, submit } \u003d req","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"-"},"content":"    // Get the goal and fetch the existing goal","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"-"},"content":"    const goal \u003d await findOneOrFail\u003cIGoal\u003e(goalsCollection, { _id: new ObjectId(String(goalId)), active: ActiveStatus.Yes, status: GoalStatus.IN_REVIEW })","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"-"},"content":"    // Fetch the user and the manager","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"-"},"content":"    const user \u003d await findOneOrFail\u003cIUser\u003e(usersCollection, { _id: new ObjectId(goal.userId) })","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"-"},"content":"    const currentDate \u003d new Date().toISOString().substring(0, 10)","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"-"},"content":"    // If the goal does not exist, return an error response","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"-"},"content":"    if (goal \u003d\u003d null) {","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"-"},"content":"      return sendErrorResponse(\u0027GOAL_NOT_FOUND\u0027)","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"-"},"content":"    // Update the goal details","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"-"},"content":"    goal.updatedDate \u003d new Date(date)","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"-"},"content":"    goal.updatedBy \u003d managerId","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"-"},"content":"    // If manager remark is provided, update it","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"-"},"content":"    if (managerRemark !\u003d null \u0026\u0026 managerRemark !\u003d\u003d \u0027\u0027 \u0026\u0026 managerRemark.length \u003e 0) {","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"-"},"content":"      goal.managerFeedback \u003d encrypt(managerRemark)","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"-"},"content":"    // If rating is provided, update it","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"-"},"content":"    if (rating !\u003d null \u0026\u0026 rating !\u003d\u003d \u0027\u0027) {","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"-"},"content":"      goal.rating \u003d encrypt(String(rating))","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"-"},"content":"    // Update the submission status and goal status","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"-"},"content":"    goal.submitted \u003d submit \u003d\u003d\u003d true ? ActiveStatus.Yes : ActiveStatus.No","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"-"},"content":"    goal.status \u003d submit \u003d\u003d\u003d true ? GoalStatus.DONE : goal.status","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"-"},"content":"    // Prepare the email payload","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"-"},"content":"    const emailPayload \u003d {","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"-"},"content":"      to: [user.email],","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"-"},"content":"      subject: \u0027Feedback update on Goal\u0027,","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"-"},"content":"      templateData: {","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"-"},"content":"        receiver_name: user.firstName,","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"-"},"content":"        goalName: decrypt(goal.goalName),","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"-"},"content":"        ui_Url: uiUrl,","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"-"},"content":"        date: currentDate","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"-"},"content":"      },","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"-"},"content":"      templateName: \u0027GoalFeedback\u0027","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"-"},"content":"    // Send the email","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"Aditya Gaur"},"content":"    await axios.post(sendEmailUrl + \u0027/send-email\u0027, emailPayload).then((response) \u003d\u003e { console.log(\u0027Email status: \u0027 + response.status) }).catch((error) \u003d\u003e { console.log(error) })","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"-"},"content":"    // Save the updated goal in the user score card","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"-"},"content":"    await save\u003cIGoal\u003e(goalsCollection, goal)","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"-"},"content":"    // Return a success response","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"-"},"content":"    return sendSuccessResponse(\u0027GOAL_UPDATED_SUCCESSFULLY\u0027, goal)","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"-"},"content":"  // Method to get a goal by its ID","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"-"},"content":"  public getGoalById \u003d async (goalId: string): Promise\u003cany\u003e \u003d\u003e {","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"-"},"content":"    // Get the goal and fetch the existing goal","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"-"},"content":"    const goal \u003d await findOne\u003cIGoal\u003e(goalsCollection, { _id: new ObjectId(goalId), active: ActiveStatus.Yes })","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"-"},"content":"    // If the goal does not exist, return an error response","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"-"},"content":"    if (goal \u003d\u003d null || goal \u003d\u003d\u003d undefined) {","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"-"},"content":"      return sendErrorResponse(\u0027GOAL_NOT_FOUND\u0027)","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"-"},"content":"    // Decrypt the goal details","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"-"},"content":"    goal.goalName \u003d decrypt(goal.goalName)","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"-"},"content":"    goal.managerFeedback \u003d decrypt(goal.managerFeedback)","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"-"},"content":"    goal.rating \u003d decrypt(goal.rating)","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"-"},"content":"    goal.userFeedback \u003d decrypt(goal.userFeedback)","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"-"},"content":"    // Remove the chats from the goal","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"-"},"content":"    delete goal.chats","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"-"},"content":"    // Calculate the weeks left for the goal","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"-"},"content":"    const currentDate \u003d Date.UTC(new Date().getUTCFullYear(), new Date().getUTCMonth(), new Date().getUTCDate())","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"-"},"content":"    const targetDate \u003d new Date(goal.targetDate)","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"-"},"content":"    const targetDateUTC \u003d Date.UTC(targetDate.getUTCFullYear(), targetDate.getUTCMonth(), targetDate.getUTCDate())","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"-"},"content":"    const weeksLeft \u003d Math.round((targetDateUTC - currentDate) / (1000 * 60 * 60 * 24 * 7))","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"-"},"content":"    // Return a success response","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"-"},"content":"    return sendSuccessResponse(\u0027GOAL_FETCHED_SUCCESSFULLY\u0027, { ...goal, weeksLeft: weeksLeft \u003e\u003d 0 ? weeksLeft : 0 })","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"-"},"content":"  // Method to delete a goal","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"-"},"content":"  public deleteGoal \u003d async (goalId: string, date: string): Promise\u003cany\u003e \u003d\u003e {","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"-"},"content":"    // Fetch the existing goal","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"-"},"content":"    const goal \u003d await findOneOrFail\u003cIGoal\u003e(goalsCollection, { _id: new ObjectId(String(goalId)), active: ActiveStatus.Yes })","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"-"},"content":"    // If the goal does not exist, return an error response","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"-"},"content":"    if (goal \u003d\u003d null) {","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"-"},"content":"      return sendErrorResponse(\u0027GOAL_NOT_FOUND\u0027)","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"-"},"content":"    }","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"-"},"content":"    // Soft delete the goal by setting its active status to No","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"-"},"content":"    goal.active \u003d ActiveStatus.No","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"-"},"content":"    await save\u003cIGoal\u003e(goalsCollection, goal)","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"-"},"content":"    // Return a success response","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"-"},"content":"    return sendSuccessResponse(\u0027GOAL_DELETED_SUCCESSFULLY\u0027)","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"-"},"content":"  // Method to get a list of goals","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"-"},"content":"  public getGoalsList \u003d async (userId: string, categoryIds?: string[], managerIds?: string[], goalName?: string): Promise\u003cany\u003e \u003d\u003e {","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"-"},"content":"    // If category IDs are provided, fetch the categories","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"-"},"content":"    const categories \u003d categoryIds !\u003d null \u0026\u0026 categoryIds.length \u003e 0 ? await findByIds\u003cIScoreCardCategory\u003e(scorecardsCategoryCollection, categoryIds) : []","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"-"},"content":"    // Prepare the query to fetch the goals","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"-"},"content":"    const query: Record\u003cstring, any\u003e \u003d {","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"-"},"content":"      $and: [","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"-"},"content":"        { userId },","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"-"},"content":"        { active: ActiveStatus.Yes }","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"-"},"content":"      ]","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"-"},"content":"    }","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"-"},"content":"    // If manager IDs are provided, add them to the query","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"-"},"content":"    if (managerIds !\u003d null \u0026\u0026 managerIds.length \u003e 0) {","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"-"},"content":"      query.$and.push({ managerId: { $in: managerIds } })","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"-"},"content":"    }","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"-"},"content":"    // If categories are found, add them to the query","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"-"},"content":"    if (categories.length \u003e 0) {","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"-"},"content":"      query.$and.push({ category: { $in: categories } })","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"-"},"content":"    }","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":221,"author":{"gitId":"-"},"content":"    // Fetch the goals","isFullCredit":false},{"lineNumber":222,"author":{"gitId":"-"},"content":"    let goalList \u003d await find\u003cIGoal\u003e(goalsCollection, query)","isFullCredit":false},{"lineNumber":223,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":224,"author":{"gitId":"-"},"content":"    // If a goal name is provided, filter the goals by the name","isFullCredit":false},{"lineNumber":225,"author":{"gitId":"-"},"content":"    if (goalName !\u003d null \u0026\u0026 goalName !\u003d\u003d \u0027\u0027 \u0026\u0026 goalName.length \u003e 0) {","isFullCredit":false},{"lineNumber":226,"author":{"gitId":"-"},"content":"      goalList \u003d goalList.filter((goal: IGoal) \u003d\u003e decrypt(goal.goalName).toLowerCase().includes(goalName.toLowerCase()))","isFullCredit":false},{"lineNumber":227,"author":{"gitId":"-"},"content":"    }","isFullCredit":false},{"lineNumber":228,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":229,"author":{"gitId":"-"},"content":"    // Prepare the list of goals to return","isFullCredit":false},{"lineNumber":230,"author":{"gitId":"-"},"content":"    const filteredGoalList \u003d goalList.map((goal: IGoal) \u003d\u003e {","isFullCredit":false},{"lineNumber":231,"author":{"gitId":"-"},"content":"      // Calculate the weeks left for the goal","isFullCredit":false},{"lineNumber":232,"author":{"gitId":"-"},"content":"      const currentDate \u003d Date.UTC(new Date().getUTCFullYear(), new Date().getUTCMonth(), new Date().getUTCDate())","isFullCredit":false},{"lineNumber":233,"author":{"gitId":"-"},"content":"      const targetDate \u003d new Date(goal.targetDate)","isFullCredit":false},{"lineNumber":234,"author":{"gitId":"-"},"content":"      const targetDateUTC \u003d Date.UTC(targetDate.getUTCFullYear(), targetDate.getUTCMonth(), targetDate.getUTCDate())","isFullCredit":false},{"lineNumber":235,"author":{"gitId":"-"},"content":"      const weeksLeft \u003d Math.round((targetDateUTC - currentDate) / (1000 * 60 * 60 * 24 * 7))","isFullCredit":false},{"lineNumber":236,"author":{"gitId":"-"},"content":"      const unreadCount \u003d (goal.chats ?? []).reduce((count: number, chat: IChat) \u003d\u003e {","isFullCredit":false},{"lineNumber":237,"author":{"gitId":"-"},"content":"        if (chat.sender !\u003d\u003d chatService.getRole(goal) \u0026\u0026 chat.status \u003d\u003d\u003d ChatStatus.UNREAD) {","isFullCredit":false},{"lineNumber":238,"author":{"gitId":"-"},"content":"          count++","isFullCredit":false},{"lineNumber":239,"author":{"gitId":"-"},"content":"        }","isFullCredit":false},{"lineNumber":240,"author":{"gitId":"-"},"content":"        return count","isFullCredit":false},{"lineNumber":241,"author":{"gitId":"-"},"content":"      }, 0)","isFullCredit":false},{"lineNumber":242,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":243,"author":{"gitId":"-"},"content":"      // Return the goal details","isFullCredit":false},{"lineNumber":244,"author":{"gitId":"-"},"content":"      return {","isFullCredit":false},{"lineNumber":245,"author":{"gitId":"-"},"content":"        _id: goal._id,","isFullCredit":false},{"lineNumber":246,"author":{"gitId":"-"},"content":"        goalName: decrypt(goal.goalName),","isFullCredit":false},{"lineNumber":247,"author":{"gitId":"-"},"content":"        categoryName: goal.category?.categoryName ?? \u0027\u0027,","isFullCredit":false},{"lineNumber":248,"author":{"gitId":"-"},"content":"        updatedDate: goal.updatedDate,","isFullCredit":false},{"lineNumber":249,"author":{"gitId":"-"},"content":"        rating: decrypt(goal.rating),","isFullCredit":false},{"lineNumber":250,"author":{"gitId":"-"},"content":"        isMeasurable: goal.isMeasurable,","isFullCredit":false},{"lineNumber":251,"author":{"gitId":"-"},"content":"        isIdeal: goal.isIdeal,","isFullCredit":false},{"lineNumber":252,"author":{"gitId":"-"},"content":"        targetDate: goal.targetDate,","isFullCredit":false},{"lineNumber":253,"author":{"gitId":"-"},"content":"        submitted: goal.submitted,","isFullCredit":false},{"lineNumber":254,"author":{"gitId":"-"},"content":"        weeksLeft,","isFullCredit":false},{"lineNumber":255,"author":{"gitId":"-"},"content":"        status: goal.status,","isFullCredit":false},{"lineNumber":256,"author":{"gitId":"-"},"content":"        accepted: goal.accepted,","isFullCredit":false},{"lineNumber":257,"author":{"gitId":"-"},"content":"        rejected: goal.rejected,","isFullCredit":false},{"lineNumber":258,"author":{"gitId":"-"},"content":"        imageUrl: goal.category?.imageUrl ?? \u0027\u0027,","isFullCredit":false},{"lineNumber":259,"author":{"gitId":"-"},"content":"        unreadChat: unreadCount","isFullCredit":false},{"lineNumber":260,"author":{"gitId":"-"},"content":"      }","isFullCredit":false},{"lineNumber":261,"author":{"gitId":"-"},"content":"    })","isFullCredit":false},{"lineNumber":262,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":263,"author":{"gitId":"-"},"content":"    // Return a success response with the list of goals","isFullCredit":false},{"lineNumber":264,"author":{"gitId":"-"},"content":"    return sendSuccessResponse(\u0027Goals fetched successfully\u0027, filteredGoalList)","isFullCredit":false},{"lineNumber":265,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":266,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":267,"author":{"gitId":"-"},"content":"  // Method to get the progress of a user\u0027s goals","isFullCredit":false},{"lineNumber":268,"author":{"gitId":"-"},"content":"  public userGoalProgress \u003d async (userId: string): Promise\u003cany\u003e \u003d\u003e {","isFullCredit":false},{"lineNumber":269,"author":{"gitId":"-"},"content":"    // Fetch the list of goals for the user","isFullCredit":false},{"lineNumber":270,"author":{"gitId":"-"},"content":"    const goalList \u003d await find\u003cIGoal\u003e(goalsCollection, { userId })","isFullCredit":false},{"lineNumber":271,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":272,"author":{"gitId":"-"},"content":"    // Filter the goals that have been submitted","isFullCredit":false},{"lineNumber":273,"author":{"gitId":"-"},"content":"    const goalListSubmitted \u003d goalList.filter((goal: { submitted: string }) \u003d\u003e goal.submitted \u003d\u003d\u003d ActiveStatus.Yes)","isFullCredit":false},{"lineNumber":274,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":275,"author":{"gitId":"-"},"content":"    // Calculate the average rating of the submitted goals","isFullCredit":false},{"lineNumber":276,"author":{"gitId":"-"},"content":"    let averageRating \u003d goalListSubmitted.length \u003e 0","isFullCredit":false},{"lineNumber":277,"author":{"gitId":"-"},"content":"      ? goalListSubmitted.map((goal: { rating: string }) \u003d\u003e parseInt(decrypt(goal.rating)))","isFullCredit":false},{"lineNumber":278,"author":{"gitId":"-"},"content":"        .reduce((a: number, b: number) \u003d\u003e a + b, 0) / goalListSubmitted.length","isFullCredit":false},{"lineNumber":279,"author":{"gitId":"-"},"content":"      : 0","isFullCredit":false},{"lineNumber":280,"author":{"gitId":"-"},"content":"    averageRating \u003d parseFloat(averageRating.toFixed(2))","isFullCredit":false},{"lineNumber":281,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":282,"author":{"gitId":"-"},"content":"    // Return a success response with the total number of goals, number of completed goals, and the overall rating","isFullCredit":false},{"lineNumber":283,"author":{"gitId":"-"},"content":"    return sendSuccessResponse(\u0027Goals fetched successfully\u0027, { total: goalList.length, completed: goalListSubmitted.length, overallRating: averageRating })","isFullCredit":false},{"lineNumber":284,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":285,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":286,"author":{"gitId":"-"},"content":"  // Method to update an employee\u0027s feedback on a goal","isFullCredit":false},{"lineNumber":287,"author":{"gitId":"-"},"content":"  public updateEmployeeFeedback \u003d async (req: EmployeeFeedback): Promise\u003cany\u003e \u003d\u003e {","isFullCredit":false},{"lineNumber":288,"author":{"gitId":"-"},"content":"    // Destructure the request object","isFullCredit":false},{"lineNumber":289,"author":{"gitId":"-"},"content":"    const { userFeedback, goalId } \u003d req","isFullCredit":false},{"lineNumber":290,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":291,"author":{"gitId":"-"},"content":"    // Fetch the goal","isFullCredit":false},{"lineNumber":292,"author":{"gitId":"-"},"content":"    const goal \u003d await findOneOrFail\u003cIGoal\u003e(goalsCollection, { _id: new ObjectId(goalId), active: ActiveStatus.Yes, status: GoalStatus.IN_REVIEW })","isFullCredit":false},{"lineNumber":293,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":294,"author":{"gitId":"-"},"content":"    // Update the user feedback on the goal","isFullCredit":false},{"lineNumber":295,"author":{"gitId":"-"},"content":"    goal.userFeedback \u003d encrypt(userFeedback)","isFullCredit":false},{"lineNumber":296,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":297,"author":{"gitId":"-"},"content":"    // Fetch the user and the manager","isFullCredit":false},{"lineNumber":298,"author":{"gitId":"-"},"content":"    const user \u003d await findOneOrFail\u003cIUser\u003e(usersCollection, { _id: new ObjectId(goal.userId) })","isFullCredit":false},{"lineNumber":299,"author":{"gitId":"-"},"content":"    const currentDate \u003d new Date().toISOString().substring(0, 10)","isFullCredit":false},{"lineNumber":300,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":301,"author":{"gitId":"-"},"content":"    // Prepare the email payload","isFullCredit":false},{"lineNumber":302,"author":{"gitId":"-"},"content":"    const emailPayload \u003d {","isFullCredit":false},{"lineNumber":303,"author":{"gitId":"-"},"content":"      to: [user.email],","isFullCredit":false},{"lineNumber":304,"author":{"gitId":"-"},"content":"      subject: \u0027Feedback update on Goal: \u0027 + decrypt(goal.goalName),","isFullCredit":false},{"lineNumber":305,"author":{"gitId":"-"},"content":"      templateData: {","isFullCredit":false},{"lineNumber":306,"author":{"gitId":"-"},"content":"        receiver_name: user.firstName,","isFullCredit":false},{"lineNumber":307,"author":{"gitId":"-"},"content":"        goalName: decrypt(goal.goalName),","isFullCredit":false},{"lineNumber":308,"author":{"gitId":"-"},"content":"        ui_Url: uiUrl,","isFullCredit":false},{"lineNumber":309,"author":{"gitId":"-"},"content":"        date: currentDate","isFullCredit":false},{"lineNumber":310,"author":{"gitId":"-"},"content":"      },","isFullCredit":false},{"lineNumber":311,"author":{"gitId":"-"},"content":"      templateName: \u0027GoalFeedback\u0027","isFullCredit":false},{"lineNumber":312,"author":{"gitId":"-"},"content":"    }","isFullCredit":false},{"lineNumber":313,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":314,"author":{"gitId":"-"},"content":"    // Send the email","isFullCredit":false},{"lineNumber":315,"author":{"gitId":"Aditya Gaur"},"content":"    await axios.post(sendEmailUrl + \u0027/send-email\u0027, emailPayload).then((response) \u003d\u003e { console.log(\u0027Email status: \u0027 + response.status) }).catch((error) \u003d\u003e { console.log(error) })","isFullCredit":false},{"lineNumber":316,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":317,"author":{"gitId":"-"},"content":"    // Save the updated goal","isFullCredit":false},{"lineNumber":318,"author":{"gitId":"-"},"content":"    await save\u003cIGoal\u003e(goalsCollection, goal)","isFullCredit":false},{"lineNumber":319,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":320,"author":{"gitId":"-"},"content":"    // Return a success response","isFullCredit":false},{"lineNumber":321,"author":{"gitId":"-"},"content":"    return sendSuccessResponse(\u0027User feedback updated successfully\u0027, goal)","isFullCredit":false},{"lineNumber":322,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":323,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":324,"author":{"gitId":"-"},"content":"  // Method to change the status of a goal to \u0027In Review\u0027","isFullCredit":false},{"lineNumber":325,"author":{"gitId":"-"},"content":"  public changeGoalStatus \u003d async (goalId: string, comment: string): Promise\u003cany\u003e \u003d\u003e {","isFullCredit":false},{"lineNumber":326,"author":{"gitId":"-"},"content":"    // Fetch the goal","isFullCredit":false},{"lineNumber":327,"author":{"gitId":"-"},"content":"    const goal \u003d await findOneOrFail\u003cIGoal\u003e(goalsCollection, { _id: new ObjectId(goalId), active: ActiveStatus.Yes })","isFullCredit":false},{"lineNumber":328,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":329,"author":{"gitId":"-"},"content":"    // Fetch the user and the manager","isFullCredit":false},{"lineNumber":330,"author":{"gitId":"-"},"content":"    const user \u003d await findOneOrFail\u003cIUser\u003e(usersCollection, { _id: new ObjectId(goal.userId) })","isFullCredit":false},{"lineNumber":331,"author":{"gitId":"-"},"content":"    const manager \u003d await findOneOrFail\u003cIUser\u003e(usersCollection, { _id: new ObjectId(goal.managerId) })","isFullCredit":false},{"lineNumber":332,"author":{"gitId":"-"},"content":"    const currentDate \u003d new Date().toISOString().substring(0, 10)","isFullCredit":false},{"lineNumber":333,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":334,"author":{"gitId":"-"},"content":"    // Update the goal status to \u0027In Review\u0027","isFullCredit":false},{"lineNumber":335,"author":{"gitId":"-"},"content":"    goal.status \u003d GoalStatus.IN_REVIEW","isFullCredit":false},{"lineNumber":336,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":337,"author":{"gitId":"-"},"content":"    // Save the updated goal","isFullCredit":false},{"lineNumber":338,"author":{"gitId":"-"},"content":"    await save\u003cIGoal\u003e(goalsCollection, goal)","isFullCredit":false},{"lineNumber":339,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":340,"author":{"gitId":"-"},"content":"    // Prepare the email payload","isFullCredit":false},{"lineNumber":341,"author":{"gitId":"-"},"content":"    const emailPayload \u003d {","isFullCredit":false},{"lineNumber":342,"author":{"gitId":"-"},"content":"      to: [manager.email],","isFullCredit":false},{"lineNumber":343,"author":{"gitId":"-"},"content":"      subject: \u0027Goal Status: Coachwalla\u0027,","isFullCredit":false},{"lineNumber":344,"author":{"gitId":"-"},"content":"      // data: acceptOrRejectGoalTemplate(manager.firstName, decrypt(goal.goalName), status, uiUrl, user.firstName + \u0027 \u0027 + user.lastName)","isFullCredit":false},{"lineNumber":345,"author":{"gitId":"-"},"content":"      templateData: {","isFullCredit":false},{"lineNumber":346,"author":{"gitId":"-"},"content":"        receiver_name: manager.firstName,","isFullCredit":false},{"lineNumber":347,"author":{"gitId":"-"},"content":"        goalName: decrypt(goal.goalName),","isFullCredit":false},{"lineNumber":348,"author":{"gitId":"-"},"content":"        goalStatus: \u0027marked in review\u0027,","isFullCredit":false},{"lineNumber":349,"author":{"gitId":"-"},"content":"        ui_Url: uiUrl,","isFullCredit":false},{"lineNumber":350,"author":{"gitId":"-"},"content":"        userName: user.firstName + \u0027 \u0027 + user.lastName,","isFullCredit":false},{"lineNumber":351,"author":{"gitId":"-"},"content":"        date: currentDate","isFullCredit":false},{"lineNumber":352,"author":{"gitId":"-"},"content":"      },","isFullCredit":false},{"lineNumber":353,"author":{"gitId":"-"},"content":"      templateName: \u0027AcceptRejectGoal\u0027","isFullCredit":false},{"lineNumber":354,"author":{"gitId":"-"},"content":"    }","isFullCredit":false},{"lineNumber":355,"author":{"gitId":"-"},"content":"    // Send the email","isFullCredit":false},{"lineNumber":356,"author":{"gitId":"Aditya Gaur"},"content":"    await axios.post(sendEmailUrl + \u0027/send-email\u0027, emailPayload).then((response) \u003d\u003e { console.log(\u0027Email status: \u0027 + response.status) }).catch((error) \u003d\u003e { console.log(error) })","isFullCredit":false},{"lineNumber":357,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":358,"author":{"gitId":"-"},"content":"    // Prepare the chat object","isFullCredit":false},{"lineNumber":359,"author":{"gitId":"-"},"content":"    const chat \u003d {","isFullCredit":false},{"lineNumber":360,"author":{"gitId":"-"},"content":"      goalId,","isFullCredit":false},{"lineNumber":361,"author":{"gitId":"-"},"content":"      senderId: goal.userId,","isFullCredit":false},{"lineNumber":362,"author":{"gitId":"-"},"content":"      date: new Date(),","isFullCredit":false},{"lineNumber":363,"author":{"gitId":"-"},"content":"      message: comment,","isFullCredit":false},{"lineNumber":364,"author":{"gitId":"-"},"content":"      isComment: true","isFullCredit":false},{"lineNumber":365,"author":{"gitId":"-"},"content":"    }","isFullCredit":false},{"lineNumber":366,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":367,"author":{"gitId":"-"},"content":"    // Add the chat to the goal","isFullCredit":false},{"lineNumber":368,"author":{"gitId":"-"},"content":"    await chatService.addChatToGoal(chat)","isFullCredit":false},{"lineNumber":369,"author":{"gitId":"-"},"content":"    // Return a success response","isFullCredit":false},{"lineNumber":370,"author":{"gitId":"-"},"content":"    return sendSuccessResponse(\u0027GOAL_STATUS_CHANGED_SUCCESSFULLY\u0027)","isFullCredit":false},{"lineNumber":371,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":372,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":373,"author":{"gitId":"-"},"content":"  // Adjusted getNextTargetDate function to use goal\u0027s createdDate","isFullCredit":false},{"lineNumber":374,"author":{"gitId":"Aditya Gaur"},"content":"  public getNextTargetDate \u003d (currentTargetDate: string, createdDate: string): string \u003d\u003e {","isFullCredit":false},{"lineNumber":375,"author":{"gitId":"Aditya Gaur"},"content":"    const currentDate \u003d new Date()","isFullCredit":false},{"lineNumber":376,"author":{"gitId":"Aditya Gaur"},"content":"    const baseDate \u003d new Date(createdDate) // Use the goal\u0027s createdDate","isFullCredit":false},{"lineNumber":377,"author":{"gitId":"Aditya Gaur"},"content":"    const targetDate \u003d new Date(currentTargetDate)","isFullCredit":false},{"lineNumber":378,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":379,"author":{"gitId":"Aditya Gaur"},"content":"    // Calculate the difference in days between the created date and the target date","isFullCredit":false},{"lineNumber":380,"author":{"gitId":"-"},"content":"    const diffInDays \u003d Math.floor((targetDate.getTime() - baseDate.getTime()) / (1000 * 3600 * 24))","isFullCredit":false},{"lineNumber":381,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":382,"author":{"gitId":"Aditya Gaur"},"content":"    // Calculate the next target date by adding the difference in days to the created date","isFullCredit":false},{"lineNumber":383,"author":{"gitId":"Aditya Gaur"},"content":"    const nextTargetDate \u003d new Date(currentDate.setDate(currentDate.getDate() + diffInDays))","isFullCredit":false},{"lineNumber":384,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":385,"author":{"gitId":"Aditya Gaur"},"content":"    // Return the next target date in ISO string format","isFullCredit":false},{"lineNumber":386,"author":{"gitId":"Aditya Gaur"},"content":"    return nextTargetDate.toISOString().substring(0, 10)","isFullCredit":false},{"lineNumber":387,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":388,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":389,"author":{"gitId":"-"},"content":"  // Adjust the cloneGoal method to pass the createdDate to getNextTargetDate","isFullCredit":false},{"lineNumber":390,"author":{"gitId":"Aditya Gaur"},"content":"  public cloneGoal \u003d async (goalId: string): Promise\u003cany\u003e \u003d\u003e {","isFullCredit":false},{"lineNumber":391,"author":{"gitId":"-"},"content":"    // Fetch the goal to clone only if its status is \"COMPLETED\"","isFullCredit":false},{"lineNumber":392,"author":{"gitId":"-"},"content":"    const goalToClone \u003d await findOneOrFail\u003cIGoal\u003e(goalsCollection, {","isFullCredit":false},{"lineNumber":393,"author":{"gitId":"-"},"content":"      _id: new ObjectId(goalId),","isFullCredit":false},{"lineNumber":394,"author":{"gitId":"-"},"content":"      active: ActiveStatus.Yes,","isFullCredit":false},{"lineNumber":395,"author":{"gitId":"-"},"content":"      status: GoalStatus.DONE // Ensure the goal\u0027s status is COMPLETED","isFullCredit":false},{"lineNumber":396,"author":{"gitId":"-"},"content":"    })","isFullCredit":false},{"lineNumber":397,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":398,"author":{"gitId":"-"},"content":"    // Create a new goal object with the cloned properties","isFullCredit":false},{"lineNumber":399,"author":{"gitId":"-"},"content":"    const clonedGoal: IGoal \u003d {","isFullCredit":false},{"lineNumber":400,"author":{"gitId":"-"},"content":"      ...goalToClone,","isFullCredit":false},{"lineNumber":401,"author":{"gitId":"-"},"content":"      _id: new ObjectId(), // Generate a new ObjectId for the cloned goal","isFullCredit":false},{"lineNumber":402,"author":{"gitId":"-"},"content":"      createdDate: new Date(), // Set the created date to the current date","isFullCredit":false},{"lineNumber":403,"author":{"gitId":"-"},"content":"      status: GoalStatus.TO_DO, // Set the status to \"TO_DO\"","isFullCredit":false},{"lineNumber":404,"author":{"gitId":"-"},"content":"      rejected: ActiveStatus.No, // Set the rejected status to \"No\"","isFullCredit":false},{"lineNumber":405,"author":{"gitId":"-"},"content":"      submitted: ActiveStatus.No,","isFullCredit":false},{"lineNumber":406,"author":{"gitId":"-"},"content":"      accepted: ActiveStatus.No,","isFullCredit":false},{"lineNumber":407,"author":{"gitId":"-"},"content":"      chats: [], // Clear the chats","isFullCredit":false},{"lineNumber":408,"author":{"gitId":"-"},"content":"      managerFeedback: encrypt(\u0027\u0027), // Clear the manager feedback","isFullCredit":false},{"lineNumber":409,"author":{"gitId":"-"},"content":"      rating: encrypt(\u00270\u0027), // Clear the rating","isFullCredit":false},{"lineNumber":410,"author":{"gitId":"Aditya Gaur"},"content":"      userFeedback: encrypt(\u0027\u0027), // Clear the user feedback","isFullCredit":false},{"lineNumber":411,"author":{"gitId":"Aditya Gaur"},"content":"      // Pass the createdDate of the goalToClone to calculate the next target date","isFullCredit":false},{"lineNumber":412,"author":{"gitId":"Aditya Gaur"},"content":"      targetDate: new Date(this.getNextTargetDate(goalToClone.targetDate.toISOString().substring(0, 10), goalToClone.createdDate.toISOString().substring(0, 10))) // Calculate the next target date","isFullCredit":false},{"lineNumber":413,"author":{"gitId":"-"},"content":"    }","isFullCredit":false},{"lineNumber":414,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":415,"author":{"gitId":"-"},"content":"    // Save the cloned goal","isFullCredit":false},{"lineNumber":416,"author":{"gitId":"-"},"content":"    await save\u003cIGoal\u003e(goalsCollection, clonedGoal)","isFullCredit":false},{"lineNumber":417,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":418,"author":{"gitId":"-"},"content":"    // Return a success response with the cloned goal","isFullCredit":false},{"lineNumber":419,"author":{"gitId":"-"},"content":"    return sendSuccessResponse(\u0027Goal cloned successfully\u0027, clonedGoal)","isFullCredit":false},{"lineNumber":420,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":421,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":422,"author":{"gitId":"-"},"content":"  // Method to accept or reject a goal","isFullCredit":false},{"lineNumber":423,"author":{"gitId":"-"},"content":"  public acceptOrRejectGoal \u003d async (goalId: string, accept: boolean): Promise\u003cany\u003e \u003d\u003e {","isFullCredit":false},{"lineNumber":424,"author":{"gitId":"-"},"content":"    // Fetch the goal","isFullCredit":false},{"lineNumber":425,"author":{"gitId":"-"},"content":"    const goal \u003d await findOneOrFail\u003cIGoal\u003e(goalsCollection, { _id: new ObjectId(goalId), active: ActiveStatus.Yes })","isFullCredit":false},{"lineNumber":426,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":427,"author":{"gitId":"-"},"content":"    // Fetch the user and the manager","isFullCredit":false},{"lineNumber":428,"author":{"gitId":"-"},"content":"    const user \u003d await findOneOrFail\u003cIUser\u003e(usersCollection, { _id: new ObjectId(goal.userId) })","isFullCredit":false},{"lineNumber":429,"author":{"gitId":"-"},"content":"    const manager \u003d await findOneOrFail\u003cIUser\u003e(usersCollection, { _id: new ObjectId(goal.managerId) })","isFullCredit":false},{"lineNumber":430,"author":{"gitId":"-"},"content":"    const currentDate \u003d new Date().toISOString().substring(0, 10)","isFullCredit":false},{"lineNumber":431,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":432,"author":{"gitId":"-"},"content":"    // Determine the status of the goal","isFullCredit":false},{"lineNumber":433,"author":{"gitId":"-"},"content":"    const status \u003d accept ? \u0027accepted\u0027 : \u0027rejected\u0027","isFullCredit":false},{"lineNumber":434,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":435,"author":{"gitId":"-"},"content":"    // Update the goal\u0027s accepted and rejected status","isFullCredit":false},{"lineNumber":436,"author":{"gitId":"-"},"content":"    goal.accepted \u003d accept ? ActiveStatus.Yes : ActiveStatus.No","isFullCredit":false},{"lineNumber":437,"author":{"gitId":"-"},"content":"    if (accept) {","isFullCredit":false},{"lineNumber":438,"author":{"gitId":"-"},"content":"      goal.status \u003d GoalStatus.IN_PROGRESS","isFullCredit":false},{"lineNumber":439,"author":{"gitId":"-"},"content":"    }","isFullCredit":false},{"lineNumber":440,"author":{"gitId":"-"},"content":"    goal.rejected \u003d accept ? ActiveStatus.No : ActiveStatus.Yes","isFullCredit":false},{"lineNumber":441,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":442,"author":{"gitId":"-"},"content":"    // Prepare the email payload","isFullCredit":false},{"lineNumber":443,"author":{"gitId":"-"},"content":"    const emailPayload \u003d {","isFullCredit":false},{"lineNumber":444,"author":{"gitId":"-"},"content":"      to: [manager.email],","isFullCredit":false},{"lineNumber":445,"author":{"gitId":"-"},"content":"      subject: \u0027Goal Status: Coachwalla\u0027,","isFullCredit":false},{"lineNumber":446,"author":{"gitId":"-"},"content":"      // data: acceptOrRejectGoalTemplate(manager.firstName, decrypt(goal.goalName), status, uiUrl, user.firstName + \u0027 \u0027 + user.lastName)","isFullCredit":false},{"lineNumber":447,"author":{"gitId":"-"},"content":"      templateData: {","isFullCredit":false},{"lineNumber":448,"author":{"gitId":"-"},"content":"        receiver_name: manager.firstName,","isFullCredit":false},{"lineNumber":449,"author":{"gitId":"-"},"content":"        goalName: decrypt(goal.goalName),","isFullCredit":false},{"lineNumber":450,"author":{"gitId":"-"},"content":"        goalStatus: status,","isFullCredit":false},{"lineNumber":451,"author":{"gitId":"-"},"content":"        ui_Url: uiUrl,","isFullCredit":false},{"lineNumber":452,"author":{"gitId":"-"},"content":"        userName: user.firstName + \u0027 \u0027 + user.lastName,","isFullCredit":false},{"lineNumber":453,"author":{"gitId":"-"},"content":"        date: currentDate","isFullCredit":false},{"lineNumber":454,"author":{"gitId":"-"},"content":"      },","isFullCredit":false},{"lineNumber":455,"author":{"gitId":"-"},"content":"      templateName: \u0027AcceptRejectGoal\u0027","isFullCredit":false},{"lineNumber":456,"author":{"gitId":"-"},"content":"    }","isFullCredit":false},{"lineNumber":457,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":458,"author":{"gitId":"-"},"content":"    // Send the email","isFullCredit":false},{"lineNumber":459,"author":{"gitId":"Aditya Gaur"},"content":"    await axios.post(sendEmailUrl + \u0027/send-email\u0027, emailPayload).then((response) \u003d\u003e { console.log(\u0027Email status: \u0027 + response.status) }).catch((error) \u003d\u003e { console.log(error) })","isFullCredit":false},{"lineNumber":460,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":461,"author":{"gitId":"-"},"content":"    // Save the updated goal","isFullCredit":false},{"lineNumber":462,"author":{"gitId":"-"},"content":"    await save\u003cIGoal\u003e(goalsCollection, goal)","isFullCredit":false},{"lineNumber":463,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":464,"author":{"gitId":"-"},"content":"    // Return a success response","isFullCredit":false},{"lineNumber":465,"author":{"gitId":"-"},"content":"    return sendSuccessResponse(\u0027GOAL_STATUS_CHANGED_SUCCESSFULLY\u0027)","isFullCredit":false},{"lineNumber":466,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":467,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":468,"author":{"gitId":"-"},"content":"  // Method to get a summary of a manager\u0027s goals","isFullCredit":false},{"lineNumber":469,"author":{"gitId":"-"},"content":"  public managerGoalSummary \u003d async (managerId: string): Promise\u003cany\u003e \u003d\u003e {","isFullCredit":false},{"lineNumber":470,"author":{"gitId":"-"},"content":"    // Fetch the goals assigned to the manager","isFullCredit":false},{"lineNumber":471,"author":{"gitId":"-"},"content":"    const goalsData \u003d await find\u003cIGoal\u003e(goalsCollection, { managerId: managerId.toString() })","isFullCredit":false},{"lineNumber":472,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":473,"author":{"gitId":"-"},"content":"    // Count the number of measurable and ideal goals","isFullCredit":false},{"lineNumber":474,"author":{"gitId":"-"},"content":"    const measurableGoalsCount \u003d goalsData.filter(goal \u003d\u003e goal.isMeasurable).length","isFullCredit":false},{"lineNumber":475,"author":{"gitId":"-"},"content":"    const idealGoalsCount \u003d goalsData.filter(goal \u003d\u003e goal.isIdeal).length","isFullCredit":false},{"lineNumber":476,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":477,"author":{"gitId":"-"},"content":"    // Return a success response with the total number of goals, and the number of measurable and ideal goals","isFullCredit":false},{"lineNumber":478,"author":{"gitId":"-"},"content":"    return sendSuccessResponse(\u0027Manager Summary Fetch Successfully\u0027, { totalNumberOfGoals: goalsData.length, measurableGoalsCount, idealGoalsCount })","isFullCredit":false},{"lineNumber":479,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":480,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":481,"author":{"gitId":"-"},"content":"  // Method to send mail for the expired goals to the user","isFullCredit":false},{"lineNumber":482,"author":{"gitId":"-"},"content":"  public expiredEmailGoals \u003d async (req: GoalRequest): Promise\u003cany\u003e \u003d\u003e {","isFullCredit":false},{"lineNumber":483,"author":{"gitId":"-"},"content":"    try {","isFullCredit":false},{"lineNumber":484,"author":{"gitId":"-"},"content":"      const currentDate \u003d new Date()","isFullCredit":false},{"lineNumber":485,"author":{"gitId":"-"},"content":"      const query \u003d { targetDate: { $lt: currentDate } }","isFullCredit":false},{"lineNumber":486,"author":{"gitId":"-"},"content":"      const goalList \u003d await find\u003cIGoal\u003e(goalsCollection, query)","isFullCredit":false},{"lineNumber":487,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":488,"author":{"gitId":"-"},"content":"      const userIdList \u003d [...new Set(goalList.map(goal \u003d\u003e goal.userId))]","isFullCredit":false},{"lineNumber":489,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":490,"author":{"gitId":"-"},"content":"      const users \u003d await findByIds\u003cIUser\u003e(usersCollection, userIdList)","isFullCredit":false},{"lineNumber":491,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":492,"author":{"gitId":"-"},"content":"      const emailPromises \u003d users.map(async (user) \u003d\u003e {","isFullCredit":false},{"lineNumber":493,"author":{"gitId":"-"},"content":"        const userGoals \u003d goalList.filter(goal \u003d\u003e goal.userId \u003d\u003d\u003d user._id.toString())","isFullCredit":false},{"lineNumber":494,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":495,"author":{"gitId":"-"},"content":"        if (userGoals.length \u003e 0 \u0026\u0026 user.email !\u003d null) {","isFullCredit":false},{"lineNumber":496,"author":{"gitId":"-"},"content":"          const emailPayload \u003d {","isFullCredit":false},{"lineNumber":497,"author":{"gitId":"-"},"content":"            to: [user.email],","isFullCredit":false},{"lineNumber":498,"author":{"gitId":"-"},"content":"            subject: \u0027Goal Status: Coachwalla\u0027,","isFullCredit":false},{"lineNumber":499,"author":{"gitId":"-"},"content":"            templateData: {","isFullCredit":false},{"lineNumber":500,"author":{"gitId":"-"},"content":"              receiver_name: `${user.firstName} ${user.lastName}`,","isFullCredit":false},{"lineNumber":501,"author":{"gitId":"-"},"content":"              goalName: userGoals.map(goal \u003d\u003e decrypt(goal.goalName)).join(\u0027, \u0027),","isFullCredit":false},{"lineNumber":502,"author":{"gitId":"-"},"content":"              goalStatus: \u0027expired\u0027,","isFullCredit":false},{"lineNumber":503,"author":{"gitId":"-"},"content":"              ui_Url: uiUrl,","isFullCredit":false},{"lineNumber":504,"author":{"gitId":"-"},"content":"              date: currentDate","isFullCredit":false},{"lineNumber":505,"author":{"gitId":"-"},"content":"            },","isFullCredit":false},{"lineNumber":506,"author":{"gitId":"-"},"content":"            templateName: \u0027ExpiredGoals\u0027","isFullCredit":false},{"lineNumber":507,"author":{"gitId":"-"},"content":"          }","isFullCredit":false},{"lineNumber":508,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":509,"author":{"gitId":"-"},"content":"          try {","isFullCredit":false},{"lineNumber":510,"author":{"gitId":"Aditya Gaur"},"content":"            const response \u003d await axios.post(sendEmailUrl + \u0027/send-email\u0027, emailPayload)","isFullCredit":false},{"lineNumber":511,"author":{"gitId":"Aditya Gaur"},"content":"            console.log(\u0027Email status: \u0027 + response.status)","isFullCredit":false},{"lineNumber":512,"author":{"gitId":"-"},"content":"          } catch (error) {","isFullCredit":false},{"lineNumber":513,"author":{"gitId":"Aditya Gaur"},"content":"            console.error(error)","isFullCredit":false},{"lineNumber":514,"author":{"gitId":"-"},"content":"          }","isFullCredit":false},{"lineNumber":515,"author":{"gitId":"-"},"content":"        }","isFullCredit":false},{"lineNumber":516,"author":{"gitId":"-"},"content":"      })","isFullCredit":false},{"lineNumber":517,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":518,"author":{"gitId":"-"},"content":"      await Promise.all(emailPromises)","isFullCredit":false},{"lineNumber":519,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":520,"author":{"gitId":"-"},"content":"      return sendSuccessResponse(\u0027Emails sent successfully!\u0027)","isFullCredit":false},{"lineNumber":521,"author":{"gitId":"-"},"content":"    } catch (error) {","isFullCredit":false},{"lineNumber":522,"author":{"gitId":"-"},"content":"      console.error(error)","isFullCredit":false},{"lineNumber":523,"author":{"gitId":"-"},"content":"      return sendErrorResponse(\u0027An error occurred while sending emails.\u0027)","isFullCredit":false},{"lineNumber":524,"author":{"gitId":"-"},"content":"    }","isFullCredit":false},{"lineNumber":525,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":526,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":527,"author":{"gitId":"-"},"content":"  // Method to get the goal list by category ID","isFullCredit":false},{"lineNumber":528,"author":{"gitId":"-"},"content":"  public getGoalListByCategoryId \u003d async (categoryId: string): Promise\u003cany\u003e \u003d\u003e {","isFullCredit":false},{"lineNumber":529,"author":{"gitId":"-"},"content":"    // Prepare the query to fetch the goals","isFullCredit":false},{"lineNumber":530,"author":{"gitId":"-"},"content":"    const query \u003d { \u0027category._id\u0027: new ObjectId(categoryId) }","isFullCredit":false},{"lineNumber":531,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":532,"author":{"gitId":"-"},"content":"    // Prepare the list of goals to return","isFullCredit":false},{"lineNumber":533,"author":{"gitId":"-"},"content":"    const goalList \u003d await find\u003cIGoal\u003e(goalsCollection, query)","isFullCredit":false},{"lineNumber":534,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":535,"author":{"gitId":"-"},"content":"    // Return a success response with the list of goals","isFullCredit":false},{"lineNumber":536,"author":{"gitId":"-"},"content":"    return sendSuccessResponse(\u0027Goals count fetched successfully\u0027, goalList.length)","isFullCredit":false},{"lineNumber":537,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":538,"author":{"gitId":"-"},"content":"}","isFullCredit":false}],"authorContributionMap":{"Aditya Gaur":24,"-":514}},{"path":"src/service/UserService.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { type IDepartment, type IGoal, type IProject, type IUser, type IUserLogin, type IUserT3B3, ActiveStatus, departmentCollection, goalsCollection, GoalStatus, projectsCollection, userLoginsCollection, usersCollection, UserT3B3, userT3B3Collection } from \u0027@codewalla_india/coachwalla-business-model\u0027","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { countDocuments, find, findOne, findOneOrFail, getUserLogin, save } from \u0027@codewalla_india/coachwalla-mongodb-utils\u0027","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Aditya Gaur"},"content":"import axios from \u0027axios\u0027","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { ObjectId } from \u0027mongodb\u0027","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Aditya Gaur"},"content":"import { sendEmailUrl, uiUrl } from \u0027../config/config\u0027","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { type CategoryRating } from \u0027../dto/CategoryRating\u0027","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { type ResetPasswordDTO } from \u0027../dto/ResetPassword\u0027","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { type T3B3ManagerFeedback } from \u0027../dto/T3B3\u0027","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { type UpdateUser } from \u0027../dto/updateUser\u0027","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { generatePassword } from \u0027../utils/appUtils\u0027","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { decrypt, encrypt } from \u0027../utils/encryptionUtils\u0027","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"import { sendErrorResponse, sendSuccessResponse } from \u0027../utils/exceptionUtils\u0027","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"export class UserService {","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"  // Method to change a user\u0027s password","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"  public changePassword \u003d async (req: ResetPasswordDTO): Promise\u003cany\u003e \u003d\u003e {","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"    // Fetch the current user\u0027s login details","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"    const userLogin \u003d getUserLogin()","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"    const user \u003d await findOneOrFail\u003cIUser\u003e(usersCollection, { _id: new ObjectId(String(userLogin.user._id)) })","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"    const currentDate \u003d new Date().toISOString().substring(0, 10)","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"    // Check if the old password provided by the user matches the current password","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"    if (decrypt(userLogin.password) \u003d\u003d\u003d decrypt(req.oldPassword)) {","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"    // Check if the new password and confirm password fields match","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"      if (req.newPassword \u003d\u003d\u003d req.confirmPassword) {","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"      // If they match, encrypt the new password and update the user\u0027s password in the database","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"        userLogin.password \u003d encrypt(req.newPassword)","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"        await save\u003cIUserLogin\u003e(userLoginsCollection, userLogin)","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // Prepare the email payload","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"        const emailPayload \u003d {","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"          to: [user.email],","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"          subject: \u0027Coachwalla: Password Reset\u0027,","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"          // data: resetAndEmailPasswordTemplate(user.firstName, user.email, userLogin.password, uiUrl)","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"          templateData: {","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"            receiver_name: user.firstName,","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"            password: decrypt(userLogin.password),","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"            ui_Url: uiUrl,","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"            date: currentDate","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"          },","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"          templateName: \u0027ResetPassword\u0027","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // Send the email","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Aditya Gaur"},"content":"        await axios.post(sendEmailUrl + \u0027/send-email\u0027, emailPayload).then((response) \u003d\u003e { console.log(\u0027Email status: \u0027 + response.status) }).catch((error) \u003d\u003e { console.log(error) })","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // Return a success response","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return sendSuccessResponse(\u0027Password changed successfully\u0027)","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"-"},"content":"      } else {","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"-"},"content":"      // If the new password and confirm password fields do not match, return an error response","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return sendErrorResponse(\u0027New password and confirm password do not match\u0027)","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"-"},"content":"      }","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"-"},"content":"    } else {","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"-"},"content":"    // If the old password provided by the user does not match the current password, return an error response","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"-"},"content":"      return sendErrorResponse(\u0027Old password is incorrect\u0027)","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"-"},"content":"  // Method to fetch user details","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"-"},"content":"  public userDetail \u003d async (userId: string): Promise\u003cany\u003e \u003d\u003e {","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"-"},"content":"    let user: IUser","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"-"},"content":"    try {","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"-"},"content":"      // Fetch the user details from the database using the user ID","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"-"},"content":"      user \u003d await findOneOrFail\u003cIUser\u003e(usersCollection, { _id: new ObjectId(String(userId)) })","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"-"},"content":"      // Check if the user has a career goal","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"-"},"content":"      const hasCareerGoal \u003d user.careerGoal !\u003d null \u0026\u0026 user.careerGoal !\u003d\u003d \u0027\u0027","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"-"},"content":"      // Set the submittedCareerGoal field based on whether the user has a career goal","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"-"},"content":"      user.submittedCareerGoal \u003d hasCareerGoal","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"-"},"content":"      // Process the user details with departments and projects","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"-"},"content":"      const userDetail \u003d await this.processUserWithDepartmentsAndProjects([user])","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"-"},"content":"      // Return a success response with the user details","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"-"},"content":"      return sendSuccessResponse(\u0027User fetched successfully\u0027, userDetail)","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"-"},"content":"    } catch (error) {","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"-"},"content":"      // If the user is not found, return an unauthenticated response","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"-"},"content":"      return sendErrorResponse(\u0027User not found\u0027)","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"-"},"content":"  // Method to fetch user details by user ID","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"-"},"content":"  public userDetailById \u003d async (userId: string): Promise\u003cany\u003e \u003d\u003e {","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"-"},"content":"    // Fetch the user details from the database using the user ID","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"-"},"content":"    const user \u003d await findOneOrFail\u003cIUser\u003e(usersCollection, { _id: new ObjectId(userId) })","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"-"},"content":"    // Construct a user detail object with the necessary fields","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"-"},"content":"    const userDetail \u003d {","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"-"},"content":"      name: `${user.firstName} ${user.lastName}`,","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"-"},"content":"      email: user.email,","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"-"},"content":"      employeeId: user.employeeId,","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"-"},"content":"      jobTitle: user.jobTitle,","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"-"},"content":"      isCoach: user.isManager","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"-"},"content":"    // Return a success response with the user details","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"-"},"content":"    return sendSuccessResponse(\u0027USER_FETCHED_SUCCESSFULLY\u0027, userDetail)","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"-"},"content":"  // Method to update a user\u0027s details","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"-"},"content":"  public updateUser \u003d async (updateData: UpdateUser): Promise\u003cany\u003e \u003d\u003e {","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"-"},"content":"    // Extract the necessary fields from the update data","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"-"},"content":"    const { userId, firstName, lastName, phoneNumber, address, dateOfBirth } \u003d updateData","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"-"},"content":"    // Fetch the user details from the database using the user ID","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"-"},"content":"    const user \u003d await findOneOrFail\u003cIUser\u003e(usersCollection, { _id: new ObjectId(userId) })","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"-"},"content":"    // Update the user\u0027s details with the new data","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"-"},"content":"    user.firstName \u003d firstName","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"-"},"content":"    user.lastName \u003d lastName","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"-"},"content":"    user.phoneNumber \u003d phoneNumber","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"-"},"content":"    user.address \u003d address","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"-"},"content":"    user.dateOfBirth \u003d new Date(dateOfBirth)","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"-"},"content":"    // Save the updated user details to the database","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"-"},"content":"    await save\u003cIUser\u003e(usersCollection, user)","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"-"},"content":"    // Return a success response","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"-"},"content":"    return sendSuccessResponse(\u0027User updated successfully\u0027)","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"-"},"content":"  // Method to fetch users by manager ID","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"-"},"content":"  public getUsersFromManagerId \u003d async (managerId: string, page: string, pageSize: string, userName?: string, projectId?: string): Promise\u003cany\u003e \u003d\u003e {","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"-"},"content":"  // Fetch the users and count from the database using the manager ID, user name, project ID, page, and page size","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"-"},"content":"    const [usersFromManagerId, count] \u003d await this.getUsers(managerId, userName, projectId, page, pageSize)","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"-"},"content":"    // Map over each user to calculate their category ratings","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"-"},"content":"    const usersWithCategories \u003d usersFromManagerId.map(async (user) \u003d\u003e {","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"-"},"content":"    // Initialize an object to store the total rating and count for each category","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"-"},"content":"      const categoryRatings: Record\u003cstring, { total: number, count: number }\u003e \u003d {}","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"-"},"content":"      // Initialize arrays to store the highest and lowest categories for each user","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"-"},"content":"      const categoriesListWithAverageRating: CategoryRating[] \u003d []","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"-"},"content":"      // Get the date 6 months ago","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"-"},"content":"      const sixMonthsAgo \u003d new Date()","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"-"},"content":"      sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6)","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"-"},"content":"      // Fetch the completed goals for the current user from the past 6 months","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"-"},"content":"      const goals \u003d await find\u003cIGoal\u003e(goalsCollection, {","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"-"},"content":"        userId: user._id.toString(),","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"-"},"content":"        status: GoalStatus.DONE,","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"-"},"content":"        updatedDate: { $gte: sixMonthsAgo }","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"-"},"content":"      })","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"-"},"content":"      // Iterate over each goal to calculate the total rating and count for each category","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"-"},"content":"      for (const goal of goals) {","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"-"},"content":"        const rating \u003d parseInt(decrypt(goal.rating))","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"-"},"content":"        if (categoryRatings[goal.category.categoryName] \u003d\u003d\u003d undefined) {","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"-"},"content":"          categoryRatings[goal.category.categoryName] \u003d { total: 0, count: 0 }","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"-"},"content":"        }","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"-"},"content":"        categoryRatings[goal.category.categoryName].total +\u003d rating","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"-"},"content":"        categoryRatings[goal.category.categoryName].count +\u003d 1","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"-"},"content":"      }","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"-"},"content":"      // Iterate over each category to calculate the average rating and determine if it\u0027s a highest or lowest category","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"-"},"content":"      for (const categoryName in categoryRatings) {","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"-"},"content":"        const averageRating \u003d Math.round(categoryRatings[categoryName].total / categoryRatings[categoryName].count)","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"-"},"content":"        categoriesListWithAverageRating.push({ categoryName, rating: averageRating })","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"-"},"content":"      }","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"-"},"content":"      console.log(categoriesListWithAverageRating)","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"-"},"content":"      // Sort the categories by rating in descending order","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"-"},"content":"      categoriesListWithAverageRating.sort((a, b) \u003d\u003e b.rating - a.rating)","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"-"},"content":"      // Assign the first category to topCategory and the last to bottomCategory","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"-"},"content":"      const topCategory \u003d categoriesListWithAverageRating.length \u003e 0 ? categoriesListWithAverageRating[0] : { categoryName: \u0027\u0027, rating: 0 }","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"-"},"content":"      const bottomCategory \u003d categoriesListWithAverageRating.length \u003e 0 ? categoriesListWithAverageRating[categoriesListWithAverageRating.length - 1] : { categoryName: \u0027\u0027, rating: 0 }","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"-"},"content":"      // Add the top category and bottom category to the user object","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"-"},"content":"      user.topCategory \u003d topCategory","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"-"},"content":"      // Return the updated user object","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"-"},"content":"      return { ...user, bottomCategory }","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"-"},"content":"    })","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"-"},"content":"    // Return a success response with the updated users and count","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"-"},"content":"    return sendSuccessResponse(\u0027Users fetched successfully\u0027, await Promise.all(usersWithCategories), count)","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"-"},"content":"  // Method to get users based on managerId, userName, projectId, page, and pageSize","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"-"},"content":"  private readonly getUsers \u003d async (managerId?: string, userName?: string, projectId?: string, page?: string, pageSize?: string): Promise\u003c[IUser[], number]\u003e \u003d\u003e {","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"-"},"content":"    // Initialize the query with active status","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"-"},"content":"    const query: any \u003d { active: ActiveStatus.Yes }","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"-"},"content":"    // If managerId is provided, add it to the query","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"-"},"content":"    if (managerId !\u003d null \u0026\u0026 managerId !\u003d\u003d \u0027\u0027 \u0026\u0026 managerId !\u003d\u003d undefined) {","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"-"},"content":"      query.managerIds \u003d { $elemMatch: { $eq: new ObjectId(managerId) } }","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"-"},"content":"    }","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"-"},"content":"    // Fetch users and count based on the query","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"-"},"content":"    let usersFromManagerId \u003d await find\u003cIUser\u003e(usersCollection, query, Number(page), Number(pageSize))","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"-"},"content":"    const count \u003d await countDocuments(usersCollection, query)","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"-"},"content":"    // If userName is provided, filter users based on userName","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"-"},"content":"    if (userName !\u003d null \u0026\u0026 userName !\u003d\u003d \u0027\u0027 \u0026\u0026 userName !\u003d\u003d undefined) {","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"-"},"content":"      usersFromManagerId \u003d usersFromManagerId.filter((user) \u003d\u003e (user.firstName.toLowerCase() + \u0027 \u0027 + user.lastName.toLowerCase()).includes(userName.toLowerCase()))","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"-"},"content":"    }","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"-"},"content":"    // If projectId is valid, filter users based on projectId","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"-"},"content":"    if ((projectId !\u003d null) \u0026\u0026 ObjectId.isValid(projectId)) {","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"-"},"content":"      usersFromManagerId \u003d usersFromManagerId.filter((user) \u003d\u003e user.projectIds?.map(id \u003d\u003e id.toString()).includes(projectId))","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"-"},"content":"    }","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"-"},"content":"    // Process users with departments and projects","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"-"},"content":"    const userDetail \u003d await this.processUserWithDepartmentsAndProjects(usersFromManagerId)","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"-"},"content":"    return [userDetail, count]","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"-"},"content":"  // Method to submit T3B3 for a user","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"-"},"content":"  public submitT3B3 \u003d async (userId: string, top: string[],","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"-"},"content":"    bottom: string[], date: Date): Promise\u003cany\u003e \u003d\u003e {","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"-"},"content":"    // Encrypt the top and bottom strings","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"-"},"content":"    const topEncrypted \u003d top.map((str: string) \u003d\u003e encrypt(str))","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"-"},"content":"    const bottomEncrypted \u003d bottom.map((str: string) \u003d\u003e encrypt(str))","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"-"},"content":"    const userT3B3 \u003d new UserT3B3()","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"-"},"content":"    // Check if the user exists","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"-"},"content":"    findOneOrFail\u003cIUser\u003e(usersCollection, { _id: new ObjectId(userId) }).catch(() \u003d\u003e sendErrorResponse(\u0027Invalid request: userId is invalid\u0027))","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"-"},"content":"    // Set the userT3B3 fields","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"-"},"content":"    userT3B3.userId \u003d userId","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"-"},"content":"    userT3B3.top \u003d topEncrypted","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"-"},"content":"    userT3B3.bottom \u003d bottomEncrypted","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"-"},"content":"    userT3B3.date \u003d date","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"-"},"content":"    userT3B3.submitted \u003d ActiveStatus.Yes","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"-"},"content":"    userT3B3.managerFeedback \u003d []","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"-"},"content":"    // Save the userT3B3 to the database","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"-"},"content":"    await save\u003cIUserT3B3\u003e(userT3B3Collection, userT3B3)","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"-"},"content":"    // Return a success response","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"-"},"content":"    return sendSuccessResponse(\u0027T3B3 submitted successfully\u0027)","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":221,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":222,"author":{"gitId":"-"},"content":"  // Method to get T3B3 by userId","isFullCredit":false},{"lineNumber":223,"author":{"gitId":"-"},"content":"  public getT3B3ByUserId \u003d async (userId: string, month: number,","isFullCredit":false},{"lineNumber":224,"author":{"gitId":"-"},"content":"    year: number): Promise\u003cany\u003e \u003d\u003e {","isFullCredit":false},{"lineNumber":225,"author":{"gitId":"-"},"content":"    // Initialize userT3B3 array","isFullCredit":false},{"lineNumber":226,"author":{"gitId":"-"},"content":"    let userT3B3: IUserT3B3[] \u003d []","isFullCredit":false},{"lineNumber":227,"author":{"gitId":"-"},"content":"    // Fetch T3B3 for the user for the given month and year","isFullCredit":false},{"lineNumber":228,"author":{"gitId":"-"},"content":"    userT3B3 \u003d await find\u003cIUserT3B3\u003e(userT3B3Collection, { userId, date: { $gte: new Date(year, month - 1, 1), $lte: new Date(year, month) } })","isFullCredit":false},{"lineNumber":229,"author":{"gitId":"-"},"content":"    // Decrypt the top, bottom, and managerFeedback fields","isFullCredit":false},{"lineNumber":230,"author":{"gitId":"-"},"content":"    userT3B3 \u003d userT3B3.map((t3b3) \u003d\u003e {","isFullCredit":false},{"lineNumber":231,"author":{"gitId":"-"},"content":"      t3b3.top \u003d t3b3.top.map(top \u003d\u003e decrypt(top))","isFullCredit":false},{"lineNumber":232,"author":{"gitId":"-"},"content":"      t3b3.bottom.forEach(bottom \u003d\u003e decrypt(bottom))","isFullCredit":false},{"lineNumber":233,"author":{"gitId":"-"},"content":"      t3b3.managerFeedback \u003d t3b3.managerFeedback.map((feedback) \u003d\u003e {","isFullCredit":false},{"lineNumber":234,"author":{"gitId":"-"},"content":"        feedback.feedback \u003d decrypt(feedback.feedback)","isFullCredit":false},{"lineNumber":235,"author":{"gitId":"-"},"content":"        return feedback","isFullCredit":false},{"lineNumber":236,"author":{"gitId":"-"},"content":"      })","isFullCredit":false},{"lineNumber":237,"author":{"gitId":"-"},"content":"      return t3b3","isFullCredit":false},{"lineNumber":238,"author":{"gitId":"-"},"content":"    })","isFullCredit":false},{"lineNumber":239,"author":{"gitId":"-"},"content":"    // Return a success response with the fetched T3B3","isFullCredit":false},{"lineNumber":240,"author":{"gitId":"-"},"content":"    return sendSuccessResponse(\u0027T3B3 fetched successfully\u0027, userT3B3)","isFullCredit":false},{"lineNumber":241,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":242,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":243,"author":{"gitId":"-"},"content":"  // Method to check if a user is a manager","isFullCredit":false},{"lineNumber":244,"author":{"gitId":"-"},"content":"  public checkIfManager \u003d async (userId: string): Promise\u003cboolean\u003e \u003d\u003e {","isFullCredit":false},{"lineNumber":245,"author":{"gitId":"-"},"content":"    // Fetch the user","isFullCredit":false},{"lineNumber":246,"author":{"gitId":"-"},"content":"    const user \u003d await findOneOrFail\u003cIUser\u003e(usersCollection, { _id: new ObjectId(userId) })","isFullCredit":false},{"lineNumber":247,"author":{"gitId":"-"},"content":"    // Return the isManager field of the user","isFullCredit":false},{"lineNumber":248,"author":{"gitId":"-"},"content":"    return user.isManager","isFullCredit":false},{"lineNumber":249,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":250,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":251,"author":{"gitId":"-"},"content":"  // Method to submit T3B3 feedback","isFullCredit":false},{"lineNumber":252,"author":{"gitId":"-"},"content":"  public submitT3B3Feedback \u003d async (t3b3Id: string, feedback: string,","isFullCredit":false},{"lineNumber":253,"author":{"gitId":"-"},"content":"    date: Date): Promise\u003cany\u003e \u003d\u003e {","isFullCredit":false},{"lineNumber":254,"author":{"gitId":"-"},"content":"    // Get the logged in user","isFullCredit":false},{"lineNumber":255,"author":{"gitId":"-"},"content":"    const userLogin \u003d getUserLogin()","isFullCredit":false},{"lineNumber":256,"author":{"gitId":"-"},"content":"    const managerId \u003d userLogin.user._id.toString()","isFullCredit":false},{"lineNumber":257,"author":{"gitId":"-"},"content":"    // Check if the logged in user is a manager","isFullCredit":false},{"lineNumber":258,"author":{"gitId":"-"},"content":"    const isManager \u003d await this.checkIfManager(managerId)","isFullCredit":false},{"lineNumber":259,"author":{"gitId":"-"},"content":"    if (!isManager) {","isFullCredit":false},{"lineNumber":260,"author":{"gitId":"-"},"content":"      return sendErrorResponse(\u0027User is not a manager\u0027)","isFullCredit":false},{"lineNumber":261,"author":{"gitId":"-"},"content":"    }","isFullCredit":false},{"lineNumber":262,"author":{"gitId":"-"},"content":"    // Create a managerFeedback object","isFullCredit":false},{"lineNumber":263,"author":{"gitId":"-"},"content":"    const managerFeedback: T3B3ManagerFeedback \u003d {","isFullCredit":false},{"lineNumber":264,"author":{"gitId":"-"},"content":"      managerId,","isFullCredit":false},{"lineNumber":265,"author":{"gitId":"-"},"content":"      feedback: encrypt(feedback),","isFullCredit":false},{"lineNumber":266,"author":{"gitId":"-"},"content":"      date","isFullCredit":false},{"lineNumber":267,"author":{"gitId":"-"},"content":"    }","isFullCredit":false},{"lineNumber":268,"author":{"gitId":"-"},"content":"    // Fetch the T3B3","isFullCredit":false},{"lineNumber":269,"author":{"gitId":"-"},"content":"    const userT3B3 \u003d await findOneOrFail\u003cIUserT3B3\u003e(userT3B3Collection, { _id: new ObjectId(t3b3Id) })","isFullCredit":false},{"lineNumber":270,"author":{"gitId":"-"},"content":"    // Add the managerFeedback to the T3B3","isFullCredit":false},{"lineNumber":271,"author":{"gitId":"-"},"content":"    userT3B3.managerFeedback.push(managerFeedback)","isFullCredit":false},{"lineNumber":272,"author":{"gitId":"-"},"content":"    // Save the updated T3B3","isFullCredit":false},{"lineNumber":273,"author":{"gitId":"-"},"content":"    await save\u003cIUserT3B3\u003e(userT3B3Collection, userT3B3)","isFullCredit":false},{"lineNumber":274,"author":{"gitId":"-"},"content":"    // Return a success response","isFullCredit":false},{"lineNumber":275,"author":{"gitId":"-"},"content":"    return sendSuccessResponse(\u0027Feedback submitted successfully\u0027)","isFullCredit":false},{"lineNumber":276,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":277,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":278,"author":{"gitId":"-"},"content":"  // Method to make a user a manager","isFullCredit":false},{"lineNumber":279,"author":{"gitId":"-"},"content":"  public makeUserManager \u003d async (id: string): Promise\u003cany\u003e \u003d\u003e {","isFullCredit":false},{"lineNumber":280,"author":{"gitId":"-"},"content":"    // Fetch the user","isFullCredit":false},{"lineNumber":281,"author":{"gitId":"-"},"content":"    const user \u003d await findOneOrFail\u003cIUser\u003e(usersCollection, { _id: new ObjectId(id) })","isFullCredit":false},{"lineNumber":282,"author":{"gitId":"-"},"content":"    // Fetch the userLogin for the user","isFullCredit":false},{"lineNumber":283,"author":{"gitId":"-"},"content":"    const userLoginUpdate \u003d await findOneOrFail\u003cIUserLogin\u003e(userLoginsCollection, { email: user.email })","isFullCredit":false},{"lineNumber":284,"author":{"gitId":"-"},"content":"    // Set the isManager field of the user to true","isFullCredit":false},{"lineNumber":285,"author":{"gitId":"-"},"content":"    user.isManager \u003d true","isFullCredit":false},{"lineNumber":286,"author":{"gitId":"-"},"content":"    // Update the user field of the userLogin","isFullCredit":false},{"lineNumber":287,"author":{"gitId":"-"},"content":"    userLoginUpdate.user \u003d user","isFullCredit":false},{"lineNumber":288,"author":{"gitId":"-"},"content":"    // Save the updated user and userLogin","isFullCredit":false},{"lineNumber":289,"author":{"gitId":"-"},"content":"    await save\u003cIUser\u003e(usersCollection, user)","isFullCredit":false},{"lineNumber":290,"author":{"gitId":"-"},"content":"    await save\u003cIUserLogin\u003e(userLoginsCollection, userLoginUpdate)","isFullCredit":false},{"lineNumber":291,"author":{"gitId":"-"},"content":"    // Return a success response with the updated user","isFullCredit":false},{"lineNumber":292,"author":{"gitId":"-"},"content":"    return sendSuccessResponse(\u0027User made manager successfully\u0027, user)","isFullCredit":false},{"lineNumber":293,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":294,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":295,"author":{"gitId":"-"},"content":"  // Method to process users with departments and projects","isFullCredit":false},{"lineNumber":296,"author":{"gitId":"-"},"content":"  public processUserWithDepartmentsAndProjects \u003d async (users: IUser[]): Promise\u003cany[]\u003e \u003d\u003e {","isFullCredit":false},{"lineNumber":297,"author":{"gitId":"-"},"content":"    const processedUsers \u003d []","isFullCredit":false},{"lineNumber":298,"author":{"gitId":"-"},"content":"    const userLogin \u003d getUserLogin()","isFullCredit":false},{"lineNumber":299,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":300,"author":{"gitId":"-"},"content":"    // For each user, fetch the departments, projects, and managers, and decrypt the careerGoal and refinedCareerGoal fields","isFullCredit":false},{"lineNumber":301,"author":{"gitId":"-"},"content":"    for (const user of users) {","isFullCredit":false},{"lineNumber":302,"author":{"gitId":"-"},"content":"      const departments \u003d await this.getDepartments(user.departmentIds)","isFullCredit":false},{"lineNumber":303,"author":{"gitId":"-"},"content":"      const projects \u003d await this.getProjects(user.projectIds)","isFullCredit":false},{"lineNumber":304,"author":{"gitId":"-"},"content":"      const managers \u003d await this.getManagers(user.managerIds)","isFullCredit":false},{"lineNumber":305,"author":{"gitId":"-"},"content":"      user.careerGoal \u003d (user.careerGoal !\u003d\u003d null \u0026\u0026 user.careerGoal !\u003d\u003d undefined) ? decrypt(user.careerGoal) : \u0027\u0027","isFullCredit":false},{"lineNumber":306,"author":{"gitId":"-"},"content":"      user.refinedCareerGoal \u003d userLogin.user.isManager \u003d\u003d\u003d true ? decrypt(user.refinedCareerGoal) : \u0027\u0027","isFullCredit":false},{"lineNumber":307,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":308,"author":{"gitId":"-"},"content":"      const { departmentIds, projectIds, managerIds, ...userObject } \u003d user","isFullCredit":false},{"lineNumber":309,"author":{"gitId":"-"},"content":"      processedUsers.push({","isFullCredit":false},{"lineNumber":310,"author":{"gitId":"-"},"content":"        ...userObject,","isFullCredit":false},{"lineNumber":311,"author":{"gitId":"-"},"content":"        departments,","isFullCredit":false},{"lineNumber":312,"author":{"gitId":"-"},"content":"        managers,","isFullCredit":false},{"lineNumber":313,"author":{"gitId":"-"},"content":"        projects","isFullCredit":false},{"lineNumber":314,"author":{"gitId":"-"},"content":"      })","isFullCredit":false},{"lineNumber":315,"author":{"gitId":"-"},"content":"    }","isFullCredit":false},{"lineNumber":316,"author":{"gitId":"-"},"content":"    // Return the processed users","isFullCredit":false},{"lineNumber":317,"author":{"gitId":"-"},"content":"    return processedUsers","isFullCredit":false},{"lineNumber":318,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":319,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":320,"author":{"gitId":"-"},"content":"  // Method to get departments by departmentIds","isFullCredit":false},{"lineNumber":321,"author":{"gitId":"-"},"content":"  private readonly getDepartments \u003d async (departmentIds: any[]): Promise\u003cany[]\u003e \u003d\u003e {","isFullCredit":false},{"lineNumber":322,"author":{"gitId":"-"},"content":"    const departments: any \u003d []","isFullCredit":false},{"lineNumber":323,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":324,"author":{"gitId":"-"},"content":"    // If departmentIds is an array, for each departmentId, fetch the department and add it to the departments array","isFullCredit":false},{"lineNumber":325,"author":{"gitId":"-"},"content":"    if (Array.isArray(departmentIds)) {","isFullCredit":false},{"lineNumber":326,"author":{"gitId":"-"},"content":"      for (const departmentId of departmentIds) {","isFullCredit":false},{"lineNumber":327,"author":{"gitId":"-"},"content":"        const department \u003d await findOne\u003cIDepartment\u003e(departmentCollection, { _id: new ObjectId(String(departmentId)) })","isFullCredit":false},{"lineNumber":328,"author":{"gitId":"-"},"content":"        departments.push(department)","isFullCredit":false},{"lineNumber":329,"author":{"gitId":"-"},"content":"      }","isFullCredit":false},{"lineNumber":330,"author":{"gitId":"-"},"content":"    }","isFullCredit":false},{"lineNumber":331,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":332,"author":{"gitId":"-"},"content":"    // Return the departments","isFullCredit":false},{"lineNumber":333,"author":{"gitId":"-"},"content":"    return departments","isFullCredit":false},{"lineNumber":334,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":335,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":336,"author":{"gitId":"-"},"content":"  // Method to get projects by projectIds","isFullCredit":false},{"lineNumber":337,"author":{"gitId":"-"},"content":"  private readonly getProjects \u003d async (projectIds: any[]): Promise\u003cany[]\u003e \u003d\u003e {","isFullCredit":false},{"lineNumber":338,"author":{"gitId":"-"},"content":"    const projects: any \u003d []","isFullCredit":false},{"lineNumber":339,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":340,"author":{"gitId":"-"},"content":"    // If projectIds is an array, for each projectId, fetch the project and add it to the projects array","isFullCredit":false},{"lineNumber":341,"author":{"gitId":"-"},"content":"    if (Array.isArray(projectIds)) {","isFullCredit":false},{"lineNumber":342,"author":{"gitId":"-"},"content":"      for (const projectId of projectIds) {","isFullCredit":false},{"lineNumber":343,"author":{"gitId":"-"},"content":"        const project \u003d await findOne\u003cIProject\u003e(projectsCollection, { _id: new ObjectId(String(projectId)) })","isFullCredit":false},{"lineNumber":344,"author":{"gitId":"-"},"content":"        projects.push(project)","isFullCredit":false},{"lineNumber":345,"author":{"gitId":"-"},"content":"      }","isFullCredit":false},{"lineNumber":346,"author":{"gitId":"-"},"content":"    }","isFullCredit":false},{"lineNumber":347,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":348,"author":{"gitId":"-"},"content":"    // Return the projects","isFullCredit":false},{"lineNumber":349,"author":{"gitId":"-"},"content":"    return projects","isFullCredit":false},{"lineNumber":350,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":351,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":352,"author":{"gitId":"-"},"content":"  // Method to get managers by managerIds","isFullCredit":false},{"lineNumber":353,"author":{"gitId":"-"},"content":"  private readonly getManagers \u003d async (managerIds: any[]): Promise\u003cany[]\u003e \u003d\u003e {","isFullCredit":false},{"lineNumber":354,"author":{"gitId":"-"},"content":"    const managers: any \u003d []","isFullCredit":false},{"lineNumber":355,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":356,"author":{"gitId":"-"},"content":"    // If managerIds is an array, for each managerId, fetch the manager and add it to the managers array","isFullCredit":false},{"lineNumber":357,"author":{"gitId":"-"},"content":"    if (Array.isArray(managerIds)) {","isFullCredit":false},{"lineNumber":358,"author":{"gitId":"-"},"content":"      for (const managerId of managerIds) {","isFullCredit":false},{"lineNumber":359,"author":{"gitId":"-"},"content":"        const manager \u003d await findOne\u003cIUser\u003e(usersCollection, { _id: new ObjectId(String(managerId)) })","isFullCredit":false},{"lineNumber":360,"author":{"gitId":"-"},"content":"        if (manager !\u003d\u003d null) {","isFullCredit":false},{"lineNumber":361,"author":{"gitId":"-"},"content":"          managers.push({ _id: managerId, name: `${manager?.firstName} ${manager?.lastName}`, employeeId: manager?.employeeId })","isFullCredit":false},{"lineNumber":362,"author":{"gitId":"-"},"content":"        }","isFullCredit":false},{"lineNumber":363,"author":{"gitId":"-"},"content":"      }","isFullCredit":false},{"lineNumber":364,"author":{"gitId":"-"},"content":"    }","isFullCredit":false},{"lineNumber":365,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":366,"author":{"gitId":"-"},"content":"    // Return the managers","isFullCredit":false},{"lineNumber":367,"author":{"gitId":"-"},"content":"    return managers","isFullCredit":false},{"lineNumber":368,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":369,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":370,"author":{"gitId":"-"},"content":"  // Method for initiating forgot password process","isFullCredit":false},{"lineNumber":371,"author":{"gitId":"-"},"content":"  public forgotPassword \u003d async (userEmail: string): Promise\u003cany\u003e \u003d\u003e {","isFullCredit":false},{"lineNumber":372,"author":{"gitId":"-"},"content":"    try {","isFullCredit":false},{"lineNumber":373,"author":{"gitId":"-"},"content":"      // Find the user by email","isFullCredit":false},{"lineNumber":374,"author":{"gitId":"-"},"content":"      const user \u003d await findOneOrFail\u003cIUser\u003e(usersCollection, { email: userEmail })","isFullCredit":false},{"lineNumber":375,"author":{"gitId":"-"},"content":"      const userLogin \u003d await findOneOrFail\u003cIUserLogin\u003e(userLoginsCollection, { email: userEmail })","isFullCredit":false},{"lineNumber":376,"author":{"gitId":"-"},"content":"      const currentDate \u003d new Date().toISOString().substring(0, 10)","isFullCredit":false},{"lineNumber":377,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":378,"author":{"gitId":"-"},"content":"      // Generate new Password","isFullCredit":false},{"lineNumber":379,"author":{"gitId":"-"},"content":"      userLogin.password \u003d generatePassword()","isFullCredit":false},{"lineNumber":380,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":381,"author":{"gitId":"-"},"content":"      // Save userLogin to database","isFullCredit":false},{"lineNumber":382,"author":{"gitId":"-"},"content":"      await save\u003cIUserLogin\u003e(userLoginsCollection, userLogin)","isFullCredit":false},{"lineNumber":383,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":384,"author":{"gitId":"-"},"content":"      // Send an email with the reset password link","isFullCredit":false},{"lineNumber":385,"author":{"gitId":"-"},"content":"      // Create an email payload with the user\u0027s emails, a subject, and a forgot password goal template","isFullCredit":false},{"lineNumber":386,"author":{"gitId":"-"},"content":"      const emailPayload \u003d {","isFullCredit":false},{"lineNumber":387,"author":{"gitId":"-"},"content":"        to: [user.email],","isFullCredit":false},{"lineNumber":388,"author":{"gitId":"-"},"content":"        subject: \u0027New Password for Login\u0027,","isFullCredit":false},{"lineNumber":389,"author":{"gitId":"-"},"content":"        templateData: {","isFullCredit":false},{"lineNumber":390,"author":{"gitId":"-"},"content":"          receiver_name: user.firstName,","isFullCredit":false},{"lineNumber":391,"author":{"gitId":"-"},"content":"          ui_Url: uiUrl,","isFullCredit":false},{"lineNumber":392,"author":{"gitId":"-"},"content":"          userName: user.firstName + \u0027 \u0027 + user.lastName,","isFullCredit":false},{"lineNumber":393,"author":{"gitId":"-"},"content":"          date: currentDate,","isFullCredit":false},{"lineNumber":394,"author":{"gitId":"-"},"content":"          password: decrypt(userLogin.password)","isFullCredit":false},{"lineNumber":395,"author":{"gitId":"-"},"content":"        },","isFullCredit":false},{"lineNumber":396,"author":{"gitId":"-"},"content":"        templateName: \u0027ForgotPassword\u0027","isFullCredit":false},{"lineNumber":397,"author":{"gitId":"-"},"content":"      }","isFullCredit":false},{"lineNumber":398,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":399,"author":{"gitId":"Aditya Gaur"},"content":"      await axios.post(sendEmailUrl + \u0027/send-email\u0027, emailPayload).then((response) \u003d\u003e { console.log(\u0027Email status: \u0027 + response.status) }).catch((error) \u003d\u003e { console.log(error) })","isFullCredit":false},{"lineNumber":400,"author":{"gitId":"-"},"content":"","isFullCredit":false},{"lineNumber":401,"author":{"gitId":"-"},"content":"      // Return success response","isFullCredit":false},{"lineNumber":402,"author":{"gitId":"-"},"content":"      return sendSuccessResponse(\u0027PASSWORD_EMAIL_SENT_SUCCESSFULLY\u0027)","isFullCredit":false},{"lineNumber":403,"author":{"gitId":"-"},"content":"    } catch (error) {","isFullCredit":false},{"lineNumber":404,"author":{"gitId":"-"},"content":"      // Handle errors (e.g., user not found)","isFullCredit":false},{"lineNumber":405,"author":{"gitId":"-"},"content":"      return sendErrorResponse(\u0027INVALID_EMAIL_ID\u0027)","isFullCredit":false},{"lineNumber":406,"author":{"gitId":"-"},"content":"    }","isFullCredit":false},{"lineNumber":407,"author":{"gitId":"-"},"content":"  }","isFullCredit":false},{"lineNumber":408,"author":{"gitId":"-"},"content":"}","isFullCredit":false}],"authorContributionMap":{"Aditya Gaur":4,"-":404}}]
